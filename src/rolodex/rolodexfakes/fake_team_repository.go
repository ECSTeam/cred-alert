// Code generated by counterfeiter. DO NOT EDIT.
package rolodexfakes

import (
	"rolodex"
	"sync"
)

type FakeTeamRepository struct {
	GetOwnersStub        func(rolodex.Repository) ([]rolodex.Team, error)
	getOwnersMutex       sync.RWMutex
	getOwnersArgsForCall []struct {
		arg1 rolodex.Repository
	}
	getOwnersReturns struct {
		result1 []rolodex.Team
		result2 error
	}
	getOwnersReturnsOnCall map[int]struct {
		result1 []rolodex.Team
		result2 error
	}
	ReloadStub        func()
	reloadMutex       sync.RWMutex
	reloadArgsForCall []struct{}
	invocations       map[string][][]interface{}
	invocationsMutex  sync.RWMutex
}

func (fake *FakeTeamRepository) GetOwners(arg1 rolodex.Repository) ([]rolodex.Team, error) {
	fake.getOwnersMutex.Lock()
	ret, specificReturn := fake.getOwnersReturnsOnCall[len(fake.getOwnersArgsForCall)]
	fake.getOwnersArgsForCall = append(fake.getOwnersArgsForCall, struct {
		arg1 rolodex.Repository
	}{arg1})
	fake.recordInvocation("GetOwners", []interface{}{arg1})
	fake.getOwnersMutex.Unlock()
	if fake.GetOwnersStub != nil {
		return fake.GetOwnersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOwnersReturns.result1, fake.getOwnersReturns.result2
}

func (fake *FakeTeamRepository) GetOwnersCallCount() int {
	fake.getOwnersMutex.RLock()
	defer fake.getOwnersMutex.RUnlock()
	return len(fake.getOwnersArgsForCall)
}

func (fake *FakeTeamRepository) GetOwnersArgsForCall(i int) rolodex.Repository {
	fake.getOwnersMutex.RLock()
	defer fake.getOwnersMutex.RUnlock()
	return fake.getOwnersArgsForCall[i].arg1
}

func (fake *FakeTeamRepository) GetOwnersReturns(result1 []rolodex.Team, result2 error) {
	fake.GetOwnersStub = nil
	fake.getOwnersReturns = struct {
		result1 []rolodex.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamRepository) GetOwnersReturnsOnCall(i int, result1 []rolodex.Team, result2 error) {
	fake.GetOwnersStub = nil
	if fake.getOwnersReturnsOnCall == nil {
		fake.getOwnersReturnsOnCall = make(map[int]struct {
			result1 []rolodex.Team
			result2 error
		})
	}
	fake.getOwnersReturnsOnCall[i] = struct {
		result1 []rolodex.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamRepository) Reload() {
	fake.reloadMutex.Lock()
	fake.reloadArgsForCall = append(fake.reloadArgsForCall, struct{}{})
	fake.recordInvocation("Reload", []interface{}{})
	fake.reloadMutex.Unlock()
	if fake.ReloadStub != nil {
		fake.ReloadStub()
	}
}

func (fake *FakeTeamRepository) ReloadCallCount() int {
	fake.reloadMutex.RLock()
	defer fake.reloadMutex.RUnlock()
	return len(fake.reloadArgsForCall)
}

func (fake *FakeTeamRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOwnersMutex.RLock()
	defer fake.getOwnersMutex.RUnlock()
	fake.reloadMutex.RLock()
	defer fake.reloadMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTeamRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rolodex.TeamRepository = new(FakeTeamRepository)
