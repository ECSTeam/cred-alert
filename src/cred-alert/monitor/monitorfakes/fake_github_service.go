// This file was generated by counterfeiter
package monitorfakes

import (
	"cred-alert/monitor"
	"sync"
)

type FakeGithubService struct {
	StatusStub        func(string) (int, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		arg1 string
	}
	statusReturns struct {
		result1 int
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGithubService) Status(arg1 string) (int, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Status", []interface{}{arg1})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeGithubService) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeGithubService) StatusArgsForCall(i int) string {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.statusArgsForCall[i].arg1
}

func (fake *FakeGithubService) StatusReturns(result1 int, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeGithubService) StatusReturnsOnCall(i int, result1 int, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeGithubService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGithubService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitor.GithubService = new(FakeGithubService)
