// This file was generated by counterfeiter
package loggingfakes

import (
	"cred-alert/logging"
	"sync"

	"github.com/pivotal-golang/lager"
)

type FakeEmitter struct {
	CountViolationStub        func(logger lager.Logger, count int)
	countViolationMutex       sync.RWMutex
	countViolationArgsForCall []struct {
		logger lager.Logger
		count  int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmitter) CountViolation(logger lager.Logger, count int) {
	fake.countViolationMutex.Lock()
	fake.countViolationArgsForCall = append(fake.countViolationArgsForCall, struct {
		logger lager.Logger
		count  int
	}{logger, count})
	fake.recordInvocation("CountViolation", []interface{}{logger, count})
	fake.countViolationMutex.Unlock()
	if fake.CountViolationStub != nil {
		fake.CountViolationStub(logger, count)
	}
}

func (fake *FakeEmitter) CountViolationCallCount() int {
	fake.countViolationMutex.RLock()
	defer fake.countViolationMutex.RUnlock()
	return len(fake.countViolationArgsForCall)
}

func (fake *FakeEmitter) CountViolationArgsForCall(i int) (lager.Logger, int) {
	fake.countViolationMutex.RLock()
	defer fake.countViolationMutex.RUnlock()
	return fake.countViolationArgsForCall[i].logger, fake.countViolationArgsForCall[i].count
}

func (fake *FakeEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countViolationMutex.RLock()
	defer fake.countViolationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logging.Emitter = new(FakeEmitter)
