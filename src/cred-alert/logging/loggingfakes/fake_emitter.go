// This file was generated by counterfeiter
package loggingfakes

import (
	"cred-alert/logging"
	"sync"
)

type FakeEmitter struct {
	CounterStub        func(name string) logging.Counter
	counterMutex       sync.RWMutex
	counterArgsForCall []struct {
		name string
	}
	counterReturns struct {
		result1 logging.Counter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmitter) Counter(name string) logging.Counter {
	fake.counterMutex.Lock()
	fake.counterArgsForCall = append(fake.counterArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Counter", []interface{}{name})
	fake.counterMutex.Unlock()
	if fake.CounterStub != nil {
		return fake.CounterStub(name)
	} else {
		return fake.counterReturns.result1
	}
}

func (fake *FakeEmitter) CounterCallCount() int {
	fake.counterMutex.RLock()
	defer fake.counterMutex.RUnlock()
	return len(fake.counterArgsForCall)
}

func (fake *FakeEmitter) CounterArgsForCall(i int) string {
	fake.counterMutex.RLock()
	defer fake.counterMutex.RUnlock()
	return fake.counterArgsForCall[i].name
}

func (fake *FakeEmitter) CounterReturns(result1 logging.Counter) {
	fake.CounterStub = nil
	fake.counterReturns = struct {
		result1 logging.Counter
	}{result1}
}

func (fake *FakeEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.counterMutex.RLock()
	defer fake.counterMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logging.Emitter = new(FakeEmitter)
