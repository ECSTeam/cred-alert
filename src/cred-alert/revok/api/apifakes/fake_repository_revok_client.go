// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"cred-alert/revok/api"
	"cred-alert/revokpb"
	"sync"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type FakeRepositoryRevokClient struct {
	GetRepositoryCredentialCountsStub        func(ctx context.Context, in *revokpb.RepositoryCredentialCountRequest, opts ...grpc.CallOption) (*revokpb.RepositoryCredentialCountResponse, error)
	getRepositoryCredentialCountsMutex       sync.RWMutex
	getRepositoryCredentialCountsArgsForCall []struct {
		ctx  context.Context
		in   *revokpb.RepositoryCredentialCountRequest
		opts []grpc.CallOption
	}
	getRepositoryCredentialCountsReturns struct {
		result1 *revokpb.RepositoryCredentialCountResponse
		result2 error
	}
	getRepositoryCredentialCountsReturnsOnCall map[int]struct {
		result1 *revokpb.RepositoryCredentialCountResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepositoryRevokClient) GetRepositoryCredentialCounts(ctx context.Context, in *revokpb.RepositoryCredentialCountRequest, opts ...grpc.CallOption) (*revokpb.RepositoryCredentialCountResponse, error) {
	fake.getRepositoryCredentialCountsMutex.Lock()
	ret, specificReturn := fake.getRepositoryCredentialCountsReturnsOnCall[len(fake.getRepositoryCredentialCountsArgsForCall)]
	fake.getRepositoryCredentialCountsArgsForCall = append(fake.getRepositoryCredentialCountsArgsForCall, struct {
		ctx  context.Context
		in   *revokpb.RepositoryCredentialCountRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("GetRepositoryCredentialCounts", []interface{}{ctx, in, opts})
	fake.getRepositoryCredentialCountsMutex.Unlock()
	if fake.GetRepositoryCredentialCountsStub != nil {
		return fake.GetRepositoryCredentialCountsStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRepositoryCredentialCountsReturns.result1, fake.getRepositoryCredentialCountsReturns.result2
}

func (fake *FakeRepositoryRevokClient) GetRepositoryCredentialCountsCallCount() int {
	fake.getRepositoryCredentialCountsMutex.RLock()
	defer fake.getRepositoryCredentialCountsMutex.RUnlock()
	return len(fake.getRepositoryCredentialCountsArgsForCall)
}

func (fake *FakeRepositoryRevokClient) GetRepositoryCredentialCountsArgsForCall(i int) (context.Context, *revokpb.RepositoryCredentialCountRequest, []grpc.CallOption) {
	fake.getRepositoryCredentialCountsMutex.RLock()
	defer fake.getRepositoryCredentialCountsMutex.RUnlock()
	return fake.getRepositoryCredentialCountsArgsForCall[i].ctx, fake.getRepositoryCredentialCountsArgsForCall[i].in, fake.getRepositoryCredentialCountsArgsForCall[i].opts
}

func (fake *FakeRepositoryRevokClient) GetRepositoryCredentialCountsReturns(result1 *revokpb.RepositoryCredentialCountResponse, result2 error) {
	fake.GetRepositoryCredentialCountsStub = nil
	fake.getRepositoryCredentialCountsReturns = struct {
		result1 *revokpb.RepositoryCredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoryRevokClient) GetRepositoryCredentialCountsReturnsOnCall(i int, result1 *revokpb.RepositoryCredentialCountResponse, result2 error) {
	fake.GetRepositoryCredentialCountsStub = nil
	if fake.getRepositoryCredentialCountsReturnsOnCall == nil {
		fake.getRepositoryCredentialCountsReturnsOnCall = make(map[int]struct {
			result1 *revokpb.RepositoryCredentialCountResponse
			result2 error
		})
	}
	fake.getRepositoryCredentialCountsReturnsOnCall[i] = struct {
		result1 *revokpb.RepositoryCredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoryRevokClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRepositoryCredentialCountsMutex.RLock()
	defer fake.getRepositoryCredentialCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepositoryRevokClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.RepositoryRevokClient = new(FakeRepositoryRevokClient)
