package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _web_templates_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x6f\xa3\x30\x10\x85\xef\xf9\x15\x5e\xdf\xc3\x64\x95\xdb\xca\x58\xab\xd2\x5e\x9b\x1c\x7a\xe9\xd1\xe0\x29\x58\x31\x76\x64\x0f\x91\x52\x8b\xff\x5e\x81\x53\x42\x72\xe2\xf1\x98\x99\xef\x69\x06\xf1\xe7\xf5\x50\x7d\x7c\x1e\xdf\x58\x47\xbd\x95\x1b\x31\x3d\x98\x55\xae\x2d\x39\x3a\x2e\x37\x8c\x89\x0e\x95\x9e\x04\x63\x82\x0c\x59\x94\x55\x75\x14\x90\x65\xb6\xad\x71\x27\x16\xd0\x96\x3c\xd2\xd5\x62\xec\x10\x89\xb3\x2e\xe0\x57\xc9\x3b\xa2\x73\xfc\x07\x30\xb8\xf3\xa9\x2d\x1a\xdf\xc3\x79\x08\xd8\xc4\xf8\xff\x6f\xb1\x2b\x76\x50\x0f\xc6\xea\xd9\xdb\xf6\xc6\x15\x4d\x8c\x99\x0a\xbf\x58\x51\x7b\x7d\xbd\x81\xb4\xb9\x30\xa3\x4b\xde\x78\x47\xe8\x88\x67\x7b\xca\xb8\x97\x55\x40\x8d\x8e\x8c\xb2\xac\xf2\x83\xa3\xc8\x5e\xae\xec\x10\x5a\xe5\xcc\xb7\x22\xe3\x9d\x80\x6e\xbf\x34\x90\xaa\x2d\xb2\xc6\xaa\x18\x4b\x3e\xd3\xb3\x73\x97\xdb\xda\x07\x8d\x01\xf5\x42\x99\xda\xee\xcb\x58\x1c\xf9\x08\xa1\xee\xf9\xfb\x73\xb2\xc7\x9a\xe9\x6d\x1e\xba\x38\x29\x05\xe5\x5a\x64\xc5\x38\xae\xc8\xe1\x71\xac\x96\x42\xdd\x56\x0c\x7e\x15\x20\x42\x4a\xc5\xbb\xea\x71\x1c\xb9\x5c\xa4\x00\x25\x05\x90\x7e\x9e\x91\x52\x71\x4f\x37\x87\x9b\x6a\xd7\x75\x02\xd6\xe4\x94\xd0\xe9\x25\x96\x80\x79\x53\xb7\xe3\x80\x36\x97\x7c\xba\x7c\x31\x01\xf9\x9f\xfa\x09\x00\x00\xff\xff\x83\x39\xd7\x21\x64\x02\x00\x00")

func web_templates_index_html() ([]byte, error) {
	return bindata_read(
		_web_templates_index_html,
		"web/templates/index.html",
	)
}

var _web_templates_organization_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xc1\x8e\x9c\x30\x0c\xbd\xef\x57\xa4\xb9\x2f\xde\x6a\x6f\x55\x88\xaa\xd2\x5e\xbb\xa3\xaa\x97\x1e\x03\x71\x21\xda\x90\xa0\xc4\x4c\x45\x23\xfe\x7d\x05\x61\x98\x19\x34\x27\xcc\xf3\xc3\xef\x3d\x63\xf1\xe9\xfb\x5b\xf5\xfb\xcf\xe9\x07\xeb\xa8\xb7\xf2\x49\x2c\x0f\x66\x95\x6b\x4b\x8e\x8e\xcb\x27\xc6\x44\x87\x4a\x2f\x05\x63\x82\x0c\x59\x94\x55\x75\x12\x90\xcb\x0c\x5b\xe3\xde\x59\x40\x5b\xf2\x48\x93\xc5\xd8\x21\x12\x67\x5d\xc0\xbf\x25\xef\x88\x86\xf8\x05\x60\x74\xc3\x7b\x5b\x34\xbe\x87\x61\x0c\xd8\xc4\xf8\xf5\x73\xf1\x52\xbc\x40\x3d\x1a\xab\x57\xec\xb9\x37\xae\x68\x62\xcc\xaa\x70\x91\x15\xb5\xd7\xd3\x26\xa4\xcd\x99\x19\x5d\xf2\xc6\x3b\x42\x47\x3c\xc3\x8b\xc7\x57\x59\x05\xd4\xe8\xc8\x28\xcb\x2a\x3f\x3a\x8a\xec\xdb\xc4\x7e\xe1\xe0\xa3\x21\x1f\x26\x01\xdd\xeb\x4e\x27\x55\x5b\x64\x8d\x55\x31\x96\x7c\xd5\xce\xc8\xb5\x7c\xae\x7d\xd0\x18\x50\xef\x1a\xcb\x67\xd7\x55\xec\x88\xbc\x95\xa0\xee\xd8\x3d\x05\x73\x56\x84\x8f\x5a\x47\xc3\xf7\x9c\xe5\x6d\x55\xdb\x91\x94\x82\x72\x2d\xb2\x62\x9e\x6f\x2c\x85\xfb\xb1\x5a\x0a\xb5\x6d\x1e\x7c\x68\x95\x33\xff\x15\x19\xef\x22\xa4\x54\xbc\xfd\x73\x18\xe6\x19\xc2\xc5\xb2\xc1\x15\xff\xa9\x7a\x9c\x67\x2e\xf7\x52\x80\x92\x02\x48\x1f\x67\xa7\x54\x6c\x81\x16\xce\xc3\xfe\x35\xd5\x1a\xea\xc8\x13\x70\xeb\x38\x25\x74\x7a\x8f\x23\x60\x5d\xfd\xf6\xaf\x41\x9b\x73\xbe\x84\x7c\x00\x02\xf2\x89\x7e\x04\x00\x00\xff\xff\xff\x7e\x78\x90\xb3\x02\x00\x00")

func web_templates_organization_html() ([]byte, error) {
	return bindata_read(
		_web_templates_organization_html,
		"web/templates/organization.html",
	)
}

var _web_templates_repository_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xb1\x6e\xc2\x30\x14\xdc\xf9\x8a\x57\xef\xc4\x54\x30\x21\x27\xaa\x48\xbb\xb6\x0c\x5d\x3a\x3a\xf1\x2b\xb6\x70\x1c\x64\xbf\x20\x21\x2b\xff\x5e\x25\x86\x04\x50\xa7\x5c\xce\x97\xbb\xcb\x7b\x16\x2f\xef\x5f\xe5\xf7\xcf\xfe\x03\x34\x35\xb6\x58\x88\xe1\x01\x56\xba\x43\xce\xd0\xb1\x62\x01\x20\x34\x4a\x35\x00\x00\x41\x86\x2c\x16\x65\xb9\x17\x3c\xc1\x44\x5b\xe3\x8e\xe0\xd1\xe6\x2c\xd0\xc5\x62\xd0\x88\xc4\x40\x7b\xfc\xcd\x99\x26\x3a\x85\x2d\xe7\x9d\x3b\x1d\x0f\x59\xdd\x36\xfc\xd4\x79\xac\x43\x78\x7b\xcd\x56\xd9\x8a\x57\x9d\xb1\x6a\xe4\x96\x8d\x71\x59\x1d\x42\x4a\xe5\xb7\x58\x51\xb5\xea\x72\x0d\x52\xe6\x0c\x46\xe5\xac\x6e\x1d\xa1\x23\x96\xe8\xa1\xe3\xba\x28\x3d\x2a\x74\x64\xa4\x85\xb2\xed\x1c\x05\xd8\x5d\x60\xe7\xa5\xab\xb5\xe0\x7a\x3d\x4b\x37\xc5\xde\x9b\xb3\x24\xdc\x42\x8c\xd9\x15\xf7\xbd\xe0\x7a\x33\x89\x48\x56\x16\xa1\xb6\x32\x84\x9c\x8d\xe5\x12\x33\xc3\x65\xd5\x7a\x85\x1e\xd5\x54\x62\xf8\x6c\x9e\xd5\xc4\x14\xb7\x0e\xa4\x9f\x4f\x9e\x2b\x3f\x6a\x86\xb7\xd1\x6e\x62\x62\xf4\xd2\x1d\x10\xb2\x64\x89\xa1\xef\xef\xb2\xfd\xa3\xbd\x2a\x62\xcc\x3e\x65\x33\xfe\x1a\xa9\x7f\x0e\xe7\xf8\x31\xfd\x59\x27\xf8\xbd\x65\x8c\xe8\xd4\x94\x27\xf8\x38\x84\xeb\x5a\xb8\x32\xe7\xb4\xb4\xb4\x2b\xc1\xd3\x6d\xfa\x0b\x00\x00\xff\xff\xad\x06\x47\xd0\x5e\x02\x00\x00")

func web_templates_repository_html() ([]byte, error) {
	return bindata_read(
		_web_templates_repository_html,
		"web/templates/repository.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"web/templates/index.html": web_templates_index_html,
	"web/templates/organization.html": web_templates_organization_html,
	"web/templates/repository.html": web_templates_repository_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"web": &_bintree_t{nil, map[string]*_bintree_t{
		"templates": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{web_templates_index_html, map[string]*_bintree_t{
			}},
			"organization.html": &_bintree_t{web_templates_organization_html, map[string]*_bintree_t{
			}},
			"repository.html": &_bintree_t{web_templates_repository_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}
