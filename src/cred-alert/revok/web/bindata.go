package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _web_templates_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\x31\x6f\xe3\x30\x0c\x85\xf7\xfc\x0a\x9e\xf6\x48\x01\x02\xdc\x70\x90\x3d\x5c\xda\xb5\xe9\xd0\xa5\xa3\x6c\xb1\x91\x50\x59\x0a\x24\x26\x80\x2b\xf8\xbf\x17\xb6\x52\xc7\x71\x27\xd3\xf4\x23\xdf\x87\x47\xcb\x3f\x4f\xc7\xc3\xdb\xfb\xeb\x33\x18\xea\x5c\xbd\x91\xe3\x03\x9c\xf2\xa7\x8a\xa1\x67\xf5\x06\x40\x1a\x54\x7a\x2c\x00\x24\x59\x72\x58\x1f\x22\x6a\xf4\x64\x95\x83\x43\xb8\x78\x82\xa6\x87\x63\x3c\x29\x6f\xbf\x14\xd9\xe0\xa5\x28\xba\x32\xe3\xac\xff\x84\x88\xae\x62\x89\x7a\x87\xc9\x20\x12\x03\x13\xf1\xa3\x62\x86\xe8\xfc\x4f\x88\xfe\x62\x79\xaf\x4c\x08\xea\x6c\x13\x6f\x43\x27\xce\x97\x88\x62\xc7\xff\xf2\xdd\x54\x6e\x3b\xeb\x79\x9b\x52\x01\x12\x3f\x44\xb2\x09\xba\xbf\xd9\x68\x7b\x05\xab\x2b\xd6\x06\x4f\xe8\x89\x95\xf6\x88\xbf\xff\x05\x9c\xe0\xff\x9a\xd8\xec\xe7\x01\x52\x8d\x43\x68\x9d\x4a\xa9\x62\x93\x7b\xe9\xdc\xcb\x6d\x13\xa2\xc6\x88\x7a\x76\x19\xc7\xee\x39\xcd\x9d\x7a\x15\x8b\x59\x7f\x5f\x93\x3d\x6a\xc6\xb7\x69\xe9\xdc\xc9\x39\x2a\x7f\x42\xe0\xc3\xb0\x70\x8e\x8f\x6b\x75\x2d\xd5\x2d\x60\x11\x16\x00\x49\xe4\xcc\x5f\x54\x87\xc3\xc0\xea\xb9\x94\x42\xd5\x52\x90\x5e\xef\xc8\x99\xdf\xe9\x26\xb8\x51\xbb\xd4\x49\xb1\x74\xce\x19\xbd\x9e\xb1\xa4\x98\x92\xba\x1d\x47\x68\x7b\x2d\xa7\x2b\x17\x93\xa2\xfc\x6e\xdf\x01\x00\x00\xff\xff\x3b\x79\xca\xbb\x7f\x02\x00\x00")

func web_templates_index_html() ([]byte, error) {
	return bindata_read(
		_web_templates_index_html,
		"web/templates/index.html",
	)
}

var _web_templates_organization_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x4f\x6f\xe3\x20\x10\xc5\xef\xf9\x14\xb3\xdc\x03\x91\x22\xed\x61\x85\x7d\xd8\xb4\xd7\xa6\xaa\x7a\xe9\x11\x9b\x69\x40\xc5\x60\xc1\x24\x12\xb5\xfc\xdd\x2b\x9b\xd4\xf9\xd3\x9e\x3c\x7e\x3c\xe6\xf7\x34\x83\xfc\xf3\xb0\xdf\xbd\xbe\x3d\x3f\x82\xa1\xce\xd5\x2b\x39\x7d\xc0\x29\x7f\xa8\x18\x7a\x56\xaf\x00\xa4\x41\xa5\xa7\x02\x40\x92\x25\x87\xf5\x2e\xa2\x46\x4f\x56\x39\xd8\x85\xa3\x27\x68\x32\xec\xe3\x41\x79\xfb\xa9\xc8\x06\x2f\x45\xf1\x95\x3b\xce\xfa\x0f\x88\xe8\x2a\x96\x28\x3b\x4c\x06\x91\x18\x98\x88\xef\x15\x33\x44\xfd\x3f\x21\xf2\xd1\xf2\xac\x4c\x08\xaa\xb7\x89\xb7\xa1\x13\xfd\x31\xa2\xd8\xf0\xbf\x7c\x33\x97\xeb\xce\x7a\xde\xa6\x54\x02\x89\xef\x44\xb2\x09\x3a\x9f\x31\xda\x9e\xc0\xea\x8a\xb5\xc1\x13\x7a\x62\x45\x9e\xe2\x6f\x7f\x04\x4e\xf0\x3f\xc3\x0b\xf6\x21\x59\x0a\x31\x4b\x61\xb6\x8b\x9d\x54\xe3\x10\x5a\xa7\x52\xaa\xd8\xcc\x2e\xca\xa5\x5c\x37\x21\x6a\x8c\xa8\x17\xc6\x74\xed\x32\xa5\x45\xa9\xaf\x11\x64\xee\x4f\xef\x53\xdd\x7a\xa6\xbf\xb9\xe5\xa2\x0c\x43\x54\xfe\x80\xc0\xc7\xf1\x8a\x1b\x6f\xdb\xea\x7a\x18\xf8\x93\xea\x70\x1c\xa5\x20\xfd\xcb\xe1\x05\x3b\x53\xef\x7d\x52\x5c\xb7\x1c\x06\xf4\x7a\xe1\x49\x31\x0f\xe0\x3c\x71\xa1\xed\xa9\xec\xa3\xac\x41\x8a\xf2\x86\xbe\x02\x00\x00\xff\xff\x6a\xca\xf5\x3a\x54\x02\x00\x00")

func web_templates_organization_html() ([]byte, error) {
	return bindata_read(
		_web_templates_organization_html,
		"web/templates/organization.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"web/templates/index.html":        web_templates_index_html,
	"web/templates/organization.html": web_templates_organization_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"web": &_bintree_t{nil, map[string]*_bintree_t{
		"templates": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html":        &_bintree_t{web_templates_index_html, map[string]*_bintree_t{}},
			"organization.html": &_bintree_t{web_templates_organization_html, map[string]*_bintree_t{}},
		}},
	}},
}}
