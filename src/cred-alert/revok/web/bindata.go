package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _web_templates_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x6f\xa3\x30\x10\x85\xef\xf9\x15\x5e\xdf\xc3\x64\x95\xdb\xca\x58\xab\xd2\x5e\x9b\x1c\x7a\xe9\xd1\xe0\x29\x58\x31\x76\x64\x0f\x91\x52\x8b\xff\x5e\x81\x53\x42\x72\xe2\xf1\x98\x99\xef\x69\x06\xf1\xe7\xf5\x50\x7d\x7c\x1e\xdf\x58\x47\xbd\x95\x1b\x31\x3d\x98\x55\xae\x2d\x39\x3a\x2e\x37\x8c\x89\x0e\x95\x9e\x04\x63\x82\x0c\x59\x94\x55\x75\x14\x90\x65\xb6\xad\x71\x27\x16\xd0\x96\x3c\xd2\xd5\x62\xec\x10\x89\xb3\x2e\xe0\x57\xc9\x3b\xa2\x73\xfc\x07\x30\xb8\xf3\xa9\x2d\x1a\xdf\xc3\x79\x08\xd8\xc4\xf8\xff\x6f\xb1\x2b\x76\x50\x0f\xc6\xea\xd9\xdb\xf6\xc6\x15\x4d\x8c\x99\x0a\xbf\x58\x51\x7b\x7d\xbd\x81\xb4\xb9\x30\xa3\x4b\xde\x78\x47\xe8\x88\x67\x7b\xca\xb8\x97\x55\x40\x8d\x8e\x8c\xb2\xac\xf2\x83\xa3\xc8\x5e\xae\xec\x10\x5a\xe5\xcc\xb7\x22\xe3\x9d\x80\x6e\xbf\x34\x90\xaa\x2d\xb2\xc6\xaa\x18\x4b\x3e\xd3\xb3\x73\x97\xdb\xda\x07\x8d\x01\xf5\x42\x99\xda\xee\xcb\x58\x1c\xf9\x08\xa1\xee\xf9\xfb\x73\xb2\xc7\x9a\xe9\x6d\x1e\xba\x38\x29\x05\xe5\x5a\x64\xc5\x38\xae\xc8\xe1\x71\xac\x96\x42\xdd\x56\x0c\x7e\x15\x20\x42\x4a\xc5\xbb\xea\x71\x1c\xb9\x5c\xa4\x00\x25\x05\x90\x7e\x9e\x91\x52\x71\x4f\x37\x87\x9b\x6a\xd7\x75\x02\xd6\xe4\x94\xd0\xe9\x25\x96\x80\x79\x53\xb7\xe3\x80\x36\x97\x7c\xba\x7c\x31\x01\xf9\x9f\xfa\x09\x00\x00\xff\xff\x83\x39\xd7\x21\x64\x02\x00\x00")

func web_templates_index_html() ([]byte, error) {
	return bindata_read(
		_web_templates_index_html,
		"web/templates/index.html",
	)
}

var _web_templates_organization_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x8f\x9b\x30\x10\x85\xef\xfb\x2b\x5c\xdf\x97\x49\x95\x5b\x65\xac\xaa\xb4\xd7\x26\xaa\x7a\xe9\xd1\xe0\x29\x58\x31\x36\xb2\x87\x54\xd4\xe2\xbf\xaf\xc0\x09\x21\x39\x31\x3c\x3f\xcf\xfb\x34\x63\xf1\xe9\xfb\xa9\xfa\xfd\xe7\xfc\x83\x75\xd4\x5b\xf9\x26\x96\x0f\xb3\xca\xb5\x25\x47\xc7\xe5\x1b\x63\xa2\x43\xa5\x97\x82\x31\x41\x86\x2c\xca\xaa\x3a\x0b\xc8\x65\x96\xad\x71\x17\x16\xd0\x96\x3c\xd2\x64\x31\x76\x88\xc4\x59\x17\xf0\x6f\xc9\x3b\xa2\x21\x7e\x01\x18\xdd\x70\x69\x8b\xc6\xf7\x30\x8c\x01\x9b\x18\xbf\x7e\x2e\x0e\xc5\x01\xea\xd1\x58\xbd\x6a\xef\xbd\x71\x45\x13\x63\x4e\x85\x7b\xac\xa8\xbd\x9e\x6e\x41\xda\x5c\x99\xd1\x25\x6f\xbc\x23\x74\xc4\xb3\xbc\x30\x1e\x65\x15\x50\xa3\x23\xa3\x2c\xab\xfc\xe8\x28\xb2\x6f\x13\xfb\x85\x83\x8f\x86\x7c\x98\x04\x74\xc7\xcd\x4e\xaa\xb6\xc8\x1a\xab\x62\x2c\xf9\x9a\x9d\x95\x47\xf9\x5e\xfb\xa0\x31\xa0\xde\x32\x96\x6b\x8f\x51\x6c\x8a\xdc\x47\x50\xf7\x7a\xfa\x4a\xf5\xec\x59\xfe\xd6\x96\x9b\x92\x52\x50\xae\x45\x56\xcc\xf3\x2e\x37\x3c\xb7\xd5\x52\xa8\xdb\x78\xc1\x87\x56\x39\xf3\x5f\x91\xf1\x2e\x42\x4a\xc5\xe9\x9f\xc3\x30\xcf\x10\xee\x5c\x06\x57\xfd\xa7\xea\x71\x9e\xb9\xdc\x4a\x01\x4a\x0a\x20\xfd\xda\x3b\xa5\xe2\x41\xbd\x42\x2f\xde\xbd\x4f\xc0\x9e\x28\x25\x74\x7a\xc3\x15\xb0\xce\xef\xb6\x30\xd0\xe6\x9a\xd7\x99\xb7\x28\x20\xbf\xb3\x8f\x00\x00\x00\xff\xff\x03\xa1\xef\x7b\x78\x02\x00\x00")

func web_templates_organization_html() ([]byte, error) {
	return bindata_read(
		_web_templates_organization_html,
		"web/templates/organization.html",
	)
}

var _web_templates_repository_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x6f\xf3\x20\x0c\x86\xef\xfd\x15\xfe\xb8\x37\xf4\x53\x6f\x13\x89\xa6\x66\xbb\x6e\x3d\xec\xb2\x23\x09\x5e\x41\x25\x4e\x05\x4e\xa5\x2a\xca\x7f\x9f\x12\xda\xb4\x8d\x76\xc2\xbc\x36\xef\x63\x0c\xea\xdf\xdb\x67\xf9\xf5\xbd\x7f\x07\xcb\x8d\x2f\x56\x6a\x5c\xc0\x6b\x3a\xe4\x02\x49\x14\x2b\x00\x65\x51\x9b\x31\x00\x50\xec\xd8\x63\x51\x96\x7b\x25\x53\x98\x64\xef\xe8\x08\x01\x7d\x2e\x22\x5f\x3c\x46\x8b\xc8\x02\x6c\xc0\x9f\x5c\x58\xe6\x53\x7c\x91\xb2\xa3\xd3\xf1\x90\xd5\x6d\x23\x4f\x5d\xc0\x3a\xc6\xd7\xff\xd9\x26\xdb\xc8\xaa\x73\xde\x4c\xda\xba\x71\x94\xd5\x31\x26\xaa\xbc\x61\x55\xd5\x9a\xcb\x15\x64\xdc\x19\x9c\xc9\x45\xdd\x12\x23\xb1\x48\xf2\xd8\xe3\xb6\x28\x03\x1a\x24\x76\xda\x43\xd9\x76\xc4\x11\x76\x17\xd8\x05\x4d\xb5\x55\xd2\x6e\xe7\x52\xd6\x95\x47\xa8\xbd\x8e\x31\x17\x13\x37\x29\xf7\x70\x5d\xb5\xc1\x60\x40\x33\xfb\x8f\xc7\xee\x63\x98\x95\xe2\x66\xcf\x76\x99\x59\x76\xf3\x5c\x33\xee\x26\xbb\x59\xe9\xfb\xa0\xe9\x80\x90\x0d\xc3\x03\x33\x3c\xdb\x9a\xa2\xef\xb3\x0f\xdd\xe0\x30\x28\xc9\xe6\x8f\xe4\x1d\x3b\x51\x97\x75\x4a\x3e\x5a\xf6\x3d\x92\x99\x79\x4a\x4e\x97\xbf\x4e\x5a\x1a\x77\x4e\xef\x90\xc6\xaf\x64\xfa\x20\xbf\x01\x00\x00\xff\xff\x66\x6d\xf3\x04\x31\x02\x00\x00")

func web_templates_repository_html() ([]byte, error) {
	return bindata_read(
		_web_templates_repository_html,
		"web/templates/repository.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"web/templates/index.html": web_templates_index_html,
	"web/templates/organization.html": web_templates_organization_html,
	"web/templates/repository.html": web_templates_repository_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"web": &_bintree_t{nil, map[string]*_bintree_t{
		"templates": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{web_templates_index_html, map[string]*_bintree_t{
			}},
			"organization.html": &_bintree_t{web_templates_organization_html, map[string]*_bintree_t{
			}},
			"repository.html": &_bintree_t{web_templates_repository_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}
