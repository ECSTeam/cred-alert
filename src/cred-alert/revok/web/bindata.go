package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _web_handler_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x0a\x56\x0f\x81\x94\xc9\xf4\xb0\x61\xc0\xe6\xc1\x0f\xad\x5b\x2c\x03\x8a\xa4\x48\x0c\xf4\xc1\x08\x06\x46\x3a\xfd\x40\x64\x52\x3b\x9d\xea\x78\x86\xff\xf7\xe1\xa8\xdf\x6e\xb7\x75\x40\xfd\x10\x90\x77\x47\xde\x77\xdf\x7d\xbc\xa8\xd2\xf1\xb3\xce\x40\x1e\xe0\x49\x88\x62\x5f\x59\x24\x19\x08\xcf\x7f\x3a\x12\xd4\xbe\xf0\xfc\xd8\x1a\x82\x17\x72\x4b\x84\x64\xa1\x4b\x40\x5a\x22\x7c\xb2\xcf\xd5\x53\x6b\x3d\x56\x64\x97\x54\xd6\x93\xdd\xcb\x4f\xdf\xff\xc2\xdb\x9c\xf6\xe5\x92\x60\x5f\x95\x9a\x80\x0d\x06\x68\x99\x13\x55\xbe\x10\x9e\x9f\x59\x9b\x95\xa0\x32\x5b\x6a\x93\x29\x8b\xd9\x32\xc3\x2a\xf6\xff\xd1\xb3\x64\x04\x60\xa8\xd0\x9c\xcc\x81\x4b\x40\xc5\xa5\x6d\x92\xd4\x36\x26\xc1\xa3\x0b\x2d\x75\x06\xe8\x8b\x50\x08\x3a\x56\x20\x73\x6d\x92\x12\x50\xd6\x84\x4d\x4c\xf2\x24\xbc\xd2\x66\x19\xa0\xec\x7e\x2e\x5c\xbd\x77\x36\xe1\xf5\x60\x5b\xdf\x75\xbf\x55\xdb\x6e\x21\x3c\xac\xe2\x07\xc0\x4f\x80\xaf\x93\xc4\xdd\x5a\x98\x4c\x78\xb5\x33\xdd\xea\xbd\x3b\xd9\x5b\xe3\xb2\x00\x43\x1b\x40\x62\x2b\x95\xb5\xe2\x75\x91\x16\x71\x7b\x95\xb5\xb4\x79\x5d\x77\x40\xae\x99\x35\x17\xf0\xc1\xda\x52\x9c\x85\x48\x1b\x13\xcb\x5b\x38\xdc\xb4\x25\x04\x03\xf4\x29\xe6\x68\x02\xfa\x73\xbc\xd1\x97\x01\x47\x33\xc4\x83\x6d\x82\xf7\x02\x6c\x34\xa2\x9d\xe3\x8c\x44\x28\xb9\xa3\xaa\x03\xc9\x04\x23\x50\x83\x46\x5e\x75\xd4\x9f\x84\xd7\x01\x5f\x0d\xa4\xf7\xd0\x07\xec\x9d\x8b\x46\xdc\x73\xe0\x2b\x39\xdb\xb2\x7f\xac\xc0\x1d\x1e\xb7\xec\x1c\x4b\x71\xce\x71\xeb\x6e\x6e\x4b\xe9\xe1\x74\xdb\x48\x78\x67\xa6\xdd\xc9\xe6\x1e\x2a\x5b\x17\x64\xf1\x38\x51\x4e\xdf\xdf\xfe\xd7\xf7\x79\x33\x08\x73\x63\x1b\x43\xb2\x29\x0c\xfd\xf8\xc3\x70\xd7\x1d\x66\xda\x14\x7f\x69\x2a\xac\xf9\x8a\xdb\x86\xd4\x05\x38\x6d\xec\x1e\x47\x30\xff\x99\xab\x6f\xfc\x5b\x4d\x7a\x92\x6b\x0a\xa1\x96\xbb\xc7\xeb\xa9\x61\xd0\x5a\x90\xf7\xcf\x25\x94\x8e\xeb\x9b\xed\xf6\x43\x70\x68\x1b\x7c\x0f\x75\x65\x4d\x0d\x1f\xb1\x20\xc0\x48\xa2\xbc\xee\xec\x7f\x36\x50\x53\xc8\x69\x08\xb5\xa9\x79\x8a\x30\xca\x5a\xae\xd6\x72\xf2\x66\xd5\x2d\x1c\xb6\xef\x1f\x82\x2b\xa7\x2d\x6b\xd2\x22\x63\x69\x3c\xcc\xda\x98\xab\x79\x1f\x27\x1a\xac\x57\x72\xf7\x78\xa1\xcb\x53\xae\xc6\xd6\x9e\xf9\xc0\xfd\xac\xb7\xb9\x9a\x34\x37\x14\xc2\x4b\x0a\x5d\xde\x55\xae\x13\xab\xb5\xe4\xb1\xa2\x3e\x16\x94\x6f\xa7\xc0\x3b\xbc\xc1\xbc\x9a\x50\x78\xb1\x35\x26\x92\x80\x38\x9c\x7d\x5b\xe8\x32\xc8\xd5\x5c\x9b\x72\x4c\x12\x0a\xaf\x48\xdd\x89\x57\x6b\x69\x8a\x92\x49\xf2\x72\xd5\xea\x5f\xbd\x43\xb4\x18\xf8\x1c\xbe\x00\x5e\xfb\xee\xf6\x50\x78\xde\x41\x39\x9e\x6f\x40\x27\x80\x81\x23\xfa\x81\x34\x35\xf5\xef\x86\x00\x8d\x2e\xdb\x7c\xee\x06\x8e\x6f\xdf\x1c\x2b\xd8\x4b\x20\x05\x94\x8c\x55\x6d\x4a\x5b\x43\xc0\x75\xb7\x2c\x31\xee\x6e\x78\x73\x37\xee\x79\xb9\x71\x9e\x80\xe3\x43\x7e\xbb\xae\x9b\x1c\x78\xd5\x47\x5e\x48\xae\x6b\xf8\xe9\xcc\xd1\xad\x26\x06\x52\xda\x34\xea\x37\xa0\x8b\x43\x75\xd0\xfd\x2b\x51\x6f\x74\xfc\x9c\x21\x0f\xec\x20\x8c\x64\x97\xef\xab\x78\x4a\x75\x51\x42\xb2\x20\xbb\xc8\x80\x16\xa3\xb2\x16\xb1\xcb\xf0\x2d\xc8\x13\x9e\xc5\xcc\x09\x77\xaf\xab\x5d\xfb\x22\xe7\x8f\x85\xcb\xee\xa7\xd4\x5d\x17\xbb\xfb\x3c\x24\xb5\x28\xff\xe0\x47\xc2\x8c\x6b\x93\x81\xec\xb9\xba\xa4\xb3\x76\xb5\x5a\xcc\x22\x59\x03\x38\x59\x32\x86\x1d\xaa\xbb\x83\x01\x7c\x14\x1e\x53\xf3\xca\xf9\x38\x92\x43\xe5\x5a\x5e\xcd\x32\xb2\xdd\x1b\x46\x61\xff\xeb\xae\x88\x9c\xf7\x22\xed\x4a\xa2\x72\x0b\xe7\x3d\xf3\x9f\x59\x59\x6b\xa9\xab\x0a\x4c\x12\x4c\xad\x11\x43\x0b\x3b\x10\x23\x44\xe9\x20\x0b\xcf\x11\xc8\xae\xcb\x1a\xe5\x77\xeb\x3e\x5d\x17\x30\x1b\x72\x43\xae\x4b\x4f\x34\x99\xc3\xae\xc6\x2f\x94\x38\x46\xb8\x4a\xfe\xad\xcc\x73\xd8\xf6\xf8\xa9\x49\x99\x66\xf7\x95\xc3\xef\xe0\x4d\x93\xa6\x80\xc1\xee\x91\x2d\x27\x8e\x62\x25\xae\x65\xae\x86\x7f\xa8\xef\x5e\x20\x6e\x08\x82\xa7\x26\x8d\x66\x43\x96\x61\xcd\xa6\xeb\x4a\xce\x18\xeb\xe6\xce\xff\x51\x37\xb4\xb9\x16\xc3\x97\xd3\x37\x11\xf6\x41\x75\xc7\x42\xf5\x00\x14\xf8\x1b\x7e\x8f\x86\x16\xdb\x63\xc5\x19\x7c\x7e\x9c\x4b\xfe\x62\xfb\x55\xc6\xb9\xc6\x1a\x68\xdd\x50\xba\xf8\xd9\x0f\x1d\x61\x6d\xe6\xad\x0d\x0e\xa1\x38\x8b\xbf\x03\x00\x00\xff\xff\x99\x27\x63\x99\x39\x0a\x00\x00")

func web_handler_go() ([]byte, error) {
	return bindata_read(
		_web_handler_go,
		"web/handler.go",
	)
}

var _web_templates_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xc1\x4e\xc3\x30\x0c\x3d\xb3\xaf\x30\xe1\xbe\xfc\x80\x9b\xcb\xe0\xca\x10\xe2\xc2\xd1\x5d\xcc\x1a\x29\x4b\xa6\x34\x4c\x1a\x51\xff\x1d\xa5\xdd\xb2\xac\x20\xed\x02\xa7\xc6\xf6\xf3\xf3\x73\x5f\x82\xf7\x8f\xeb\xd5\xdb\xfb\xcb\x13\x74\x71\x67\xd5\x02\xf3\x07\x2c\xb9\x6d\x23\xd8\x09\xb5\x00\xc0\x8e\x49\xe7\x03\x00\x46\x13\x2d\xab\x55\x60\xcd\x2e\x1a\xb2\xb0\xf2\x9f\x2e\x42\x7b\x84\x75\xd8\x92\x33\x5f\x14\x8d\x77\x28\x27\x5c\x6e\x96\xe7\x6e\x6c\xbd\x3e\x9e\x68\xb4\x39\x80\xd1\x8d\xd8\x78\x17\xd9\x45\x31\xa5\x33\x3f\xb5\x96\x61\x63\xa9\xef\x1b\x31\x06\xa5\x96\xab\x17\x25\x25\xa3\x66\x83\xbb\x79\x7d\x2e\xf6\x1a\x93\xa3\x91\xb4\x64\x52\x0a\xe4\xb6\x0c\xcb\x9a\xb8\x1f\x86\x4a\x46\xb8\x9e\xa1\x15\x12\x74\x81\x3f\x1a\xf1\x90\xd2\xf2\x99\x76\x3c\x0c\x42\x95\x23\x4a\x52\x28\xa3\x9e\x77\xa5\xb4\xbc\x88\x1b\xb5\x65\x6c\x8d\x43\x59\xcf\x4a\x89\x9d\x2e\x42\x50\x8e\xff\xa7\x28\xc7\x36\x80\x54\xbf\x06\x5d\x28\xa8\x1b\xdb\x9d\x0c\xc8\xde\x54\xab\xcc\x0d\xb9\xc3\x0d\xed\x73\x63\xbd\xe3\x39\x75\xc3\xae\x57\xde\xfb\xde\x44\x1f\x8e\x7f\x6a\x56\xa1\x35\x7c\xc3\xab\x7f\xb3\x65\xf1\xd3\x25\x94\xda\x1c\xa6\x67\x30\xdd\x7e\x94\xd3\x33\xfb\x0e\x00\x00\xff\xff\x99\x7c\x11\xe1\x77\x03\x00\x00")

func web_templates_index_html() ([]byte, error) {
	return bindata_read(
		_web_templates_index_html,
		"web/templates/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"web/handler.go":           web_handler_go,
	"web/templates/index.html": web_templates_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"web": &_bintree_t{nil, map[string]*_bintree_t{
		"handler.go": &_bintree_t{web_handler_go, map[string]*_bintree_t{}},
		"templates": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{web_templates_index_html, map[string]*_bintree_t{}},
		}},
	}},
}}
