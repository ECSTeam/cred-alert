package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _revok_web_handler_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xc1\x6a\xdc\x30\x10\x3d\x4b\x5f\x31\xf5\x21\xd8\xc1\xf1\x96\x42\x2f\x86\x1c\x4a\x1a\x48\xa1\xa4\x21\x59\xe8\x21\xe4\xa0\xda\xb3\xb6\xa8\x57\x72\x47\xe3\x6e\xb7\x61\xff\xbd\x48\xd6\x3a\xde\x74\x4b\x43\xa9\x0e\xda\x95\x34\x7a\xef\xcd\x9b\x91\x7b\x55\x7d\x55\x0d\xc2\x06\xbf\x48\xa9\xd7\xbd\x25\x86\x54\x8a\xa4\xe5\x75\xb7\x60\x5c\xf7\x9d\x62\x4c\xa4\x48\x0c\xf2\xa2\x65\xee\x13\x29\x45\x52\xd9\x1a\x8b\xaa\xb3\x43\xbd\xb2\x83\xa9\x69\x5b\x58\x6a\x16\x9d\x6a\x90\x12\x99\x49\xc9\xdb\x1e\xa1\x55\xa6\xee\x90\xc0\x31\x0d\x15\xc3\xa3\x14\x9d\x6d\x1a\x24\x88\x23\x84\x17\x1f\xc3\x9e\x14\x7b\xae\xf1\xec\x74\xbf\x2c\x96\xf1\x8f\x14\xd4\x57\x77\x48\xdf\x91\xde\xd5\x75\x40\xd5\xa6\x91\x3b\x29\x57\x83\xa9\xe0\x1a\x37\x57\x23\x5f\x3a\xf1\xcc\x09\xf2\x19\xc3\xef\xe0\xf9\x71\xf4\x5c\x66\xe0\x73\x2e\x22\xb4\xcf\x81\x90\x07\x32\x70\x12\xb3\x7b\x94\x22\xd2\x95\x53\x5e\x7b\xc2\x89\x31\x1e\xf1\x13\xdb\x21\x5d\x09\x07\xcb\x5c\x8a\x9d\x4f\x2c\xb8\x78\x8b\xbd\x75\x9a\x2d\x6d\x67\x46\x5e\xab\x35\xc2\x6c\x44\x33\xc4\x05\x61\x8d\x86\xb5\xea\x2e\xec\x60\x18\x06\x6d\x78\x42\xfa\x44\x8d\x32\xfa\xa7\x62\x6d\xcd\x0b\xb0\x6e\x14\xb7\xc7\xf6\x27\x41\x1a\x9d\xdf\xbf\x7f\x78\x92\xf8\x17\x05\x7b\xbb\xdf\x2b\x56\x33\x05\x73\x61\x0e\xee\x1f\xe6\xeb\xa9\xc0\x69\xbb\x6f\xa8\x0c\x82\x55\x57\xcb\xe5\x4d\xba\x19\xeb\x73\x8b\xae\xb7\xc6\xe1\x67\xd2\x8c\x94\x03\xc1\x69\xdc\xff\x36\xa0\xe3\xcc\xb3\x2c\x16\xd0\x20\x83\xa5\xc6\xc1\x8a\xec\xda\x7b\x0e\x2e\x98\x2e\x05\x12\x41\x79\x0e\x6d\x31\xb5\xc6\xe5\x0f\xac\x06\xc6\x74\x93\xc3\xc9\x5c\xb7\x2f\xf8\x81\xe0\xf2\x99\x62\x1f\x20\xc2\x14\xac\x2d\xe7\x1e\x26\xce\xae\xf1\xcc\x52\x93\xe4\x21\xe0\x99\x5b\x25\xbc\x79\x3d\x1e\x78\xf3\x8f\xdc\xec\x15\xb7\xf1\xea\xbc\x0c\xe5\x41\x11\x46\xee\x28\xe1\x8f\x22\x68\x8a\x8f\x80\x47\xd4\xbc\x8d\x27\xbb\xfc\x45\x90\x96\x5b\xa4\xff\x0c\xbc\x45\x3e\x53\xe6\x9f\x91\xc7\x9f\x30\xfb\x69\x97\x49\x29\xf4\x0a\x7c\xb9\x5f\x9d\x83\xd1\x9d\xef\x0c\xd1\x93\x36\xdc\x99\x34\x59\x29\xdd\x61\x0d\x6c\x01\xc7\xf2\x4f\x6f\x36\xc9\xfd\xa5\xe2\x92\xc8\x52\x9a\x65\x52\x88\x4d\x11\xba\xed\x0a\x55\x8d\x94\x86\x76\xbb\x63\xc5\x83\xfb\x60\x18\xc9\xa8\x6e\x7c\xd0\xe1\x86\x8f\x1f\x3f\x1c\xe3\xd3\xfe\x15\x00\x00\xff\xff\x32\x91\x1b\xa2\x76\x05\x00\x00")

func revok_web_handler_go() ([]byte, error) {
	return bindata_read(
		_revok_web_handler_go,
		"revok/web/handler.go",
	)
}

var _revok_web_templates_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xb1\x4e\xc3\x30\x10\x86\xf7\x3e\xc5\xe1\x07\x88\xd5\xfd\xe2\xa5\xb0\xd2\x0a\xb1\x30\x5e\xeb\xa3\xb6\x94\xda\xc8\x31\x95\x82\xe5\x77\x47\x4e\xc0\x4d\xc3\xd0\x01\x98\x12\xdf\xfd\xf7\xdf\xa7\x5f\x36\xde\xdd\x6f\x37\xcf\x2f\xbb\x07\x30\xf1\xd4\xa9\x15\x96\x0f\x74\xe4\x8e\xad\x60\x27\xd4\x0a\x00\x0d\x93\x2e\x3f\x00\x18\x6d\xec\x58\x6d\x02\x6b\x76\xd1\x52\x07\x1b\xff\xee\x22\xec\x07\xd8\x86\x23\x39\xfb\x41\xd1\x7a\x87\x72\xd2\x95\x61\xf9\x3d\x8d\x7b\xaf\x87\x2f\x1b\x6d\xcf\x60\x75\x2b\x0e\xde\x45\x76\x51\x4c\xe5\xe2\x4f\xfb\x8e\xe1\xd0\x51\xdf\xb7\x62\x3c\xd4\x5e\xe9\x5e\x48\x6a\x45\x2d\x16\x9b\x65\x7f\x09\x7b\xad\x29\xa7\xd1\xb4\x56\x52\x0a\xe4\x8e\x0c\xcd\xdc\xb8\xcf\x79\x86\x11\xae\x77\x68\x85\x04\x26\xf0\x6b\x2b\x52\x6a\x76\x14\x4d\xce\x42\xa5\xd4\x3c\xd2\x89\x73\x46\x49\x0a\x65\xd4\xcb\xa1\x94\x9a\x0b\xdb\x88\x56\xb4\x73\x1d\xca\xf9\xaa\x94\xd8\xe9\xca\x81\x72\x8c\xa7\x82\xdf\xc0\x46\xb3\x9e\x13\x99\xf5\x6f\x22\x7f\xe2\x37\xdf\xdb\xe8\xc3\xf0\xa7\x81\x57\x5b\xcb\x37\xf2\xfe\xb7\x6c\x57\x3f\xa3\x46\xa9\xed\x79\xba\xca\xd3\x0d\x46\x39\x3d\x95\xcf\x00\x00\x00\xff\xff\x5f\x1b\x19\x47\x3b\x03\x00\x00")

func revok_web_templates_index_html() ([]byte, error) {
	return bindata_read(
		_revok_web_templates_index_html,
		"revok/web/templates/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"revok/web/handler.go":           revok_web_handler_go,
	"revok/web/templates/index.html": revok_web_templates_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"revok": &_bintree_t{nil, map[string]*_bintree_t{
		"web": &_bintree_t{nil, map[string]*_bintree_t{
			"handler.go": &_bintree_t{revok_web_handler_go, map[string]*_bintree_t{}},
			"templates": &_bintree_t{nil, map[string]*_bintree_t{
				"index.html": &_bintree_t{revok_web_templates_index_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
