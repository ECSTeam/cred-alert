// Code generated by counterfeiter. DO NOT EDIT.
package revokfakes

import (
	"cred-alert/revok"
	"sync"
)

type FakeGitGetParentsDiffClient struct {
	GetParentsStub        func(string, string) ([]string, error)
	getParentsMutex       sync.RWMutex
	getParentsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getParentsReturns struct {
		result1 []string
		result2 error
	}
	getParentsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	DiffStub        func(repoPath, parent, child string) (string, error)
	diffMutex       sync.RWMutex
	diffArgsForCall []struct {
		repoPath string
		parent   string
		child    string
	}
	diffReturns struct {
		result1 string
		result2 error
	}
	diffReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitGetParentsDiffClient) GetParents(arg1 string, arg2 string) ([]string, error) {
	fake.getParentsMutex.Lock()
	ret, specificReturn := fake.getParentsReturnsOnCall[len(fake.getParentsArgsForCall)]
	fake.getParentsArgsForCall = append(fake.getParentsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetParents", []interface{}{arg1, arg2})
	fake.getParentsMutex.Unlock()
	if fake.GetParentsStub != nil {
		return fake.GetParentsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getParentsReturns.result1, fake.getParentsReturns.result2
}

func (fake *FakeGitGetParentsDiffClient) GetParentsCallCount() int {
	fake.getParentsMutex.RLock()
	defer fake.getParentsMutex.RUnlock()
	return len(fake.getParentsArgsForCall)
}

func (fake *FakeGitGetParentsDiffClient) GetParentsArgsForCall(i int) (string, string) {
	fake.getParentsMutex.RLock()
	defer fake.getParentsMutex.RUnlock()
	return fake.getParentsArgsForCall[i].arg1, fake.getParentsArgsForCall[i].arg2
}

func (fake *FakeGitGetParentsDiffClient) GetParentsReturns(result1 []string, result2 error) {
	fake.GetParentsStub = nil
	fake.getParentsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitGetParentsDiffClient) GetParentsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.GetParentsStub = nil
	if fake.getParentsReturnsOnCall == nil {
		fake.getParentsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getParentsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitGetParentsDiffClient) Diff(repoPath string, parent string, child string) (string, error) {
	fake.diffMutex.Lock()
	ret, specificReturn := fake.diffReturnsOnCall[len(fake.diffArgsForCall)]
	fake.diffArgsForCall = append(fake.diffArgsForCall, struct {
		repoPath string
		parent   string
		child    string
	}{repoPath, parent, child})
	fake.recordInvocation("Diff", []interface{}{repoPath, parent, child})
	fake.diffMutex.Unlock()
	if fake.DiffStub != nil {
		return fake.DiffStub(repoPath, parent, child)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.diffReturns.result1, fake.diffReturns.result2
}

func (fake *FakeGitGetParentsDiffClient) DiffCallCount() int {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return len(fake.diffArgsForCall)
}

func (fake *FakeGitGetParentsDiffClient) DiffArgsForCall(i int) (string, string, string) {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return fake.diffArgsForCall[i].repoPath, fake.diffArgsForCall[i].parent, fake.diffArgsForCall[i].child
}

func (fake *FakeGitGetParentsDiffClient) DiffReturns(result1 string, result2 error) {
	fake.DiffStub = nil
	fake.diffReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitGetParentsDiffClient) DiffReturnsOnCall(i int, result1 string, result2 error) {
	fake.DiffStub = nil
	if fake.diffReturnsOnCall == nil {
		fake.diffReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.diffReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitGetParentsDiffClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getParentsMutex.RLock()
	defer fake.getParentsMutex.RUnlock()
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitGetParentsDiffClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ revok.GitGetParentsDiffClient = new(FakeGitGetParentsDiffClient)
