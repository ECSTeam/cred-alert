// This file was generated by counterfeiter
package revokfakes

import (
	"cred-alert/revok"
	"cred-alert/revokpb"
	"sync"

	"golang.org/x/net/context"
)

type FakeRevokServer struct {
	GetCredentialCountsStub        func(context.Context, *revokpb.CredentialCountRequest) (*revokpb.CredentialCountResponse, error)
	getCredentialCountsMutex       sync.RWMutex
	getCredentialCountsArgsForCall []struct {
		arg1 context.Context
		arg2 *revokpb.CredentialCountRequest
	}
	getCredentialCountsReturns struct {
		result1 *revokpb.CredentialCountResponse
		result2 error
	}
	GetOrganizationCredentialCountsStub        func(context.Context, *revokpb.OrganizationCredentialCountRequest) (*revokpb.OrganizationCredentialCountResponse, error)
	getOrganizationCredentialCountsMutex       sync.RWMutex
	getOrganizationCredentialCountsArgsForCall []struct {
		arg1 context.Context
		arg2 *revokpb.OrganizationCredentialCountRequest
	}
	getOrganizationCredentialCountsReturns struct {
		result1 *revokpb.OrganizationCredentialCountResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRevokServer) GetCredentialCounts(arg1 context.Context, arg2 *revokpb.CredentialCountRequest) (*revokpb.CredentialCountResponse, error) {
	fake.getCredentialCountsMutex.Lock()
	fake.getCredentialCountsArgsForCall = append(fake.getCredentialCountsArgsForCall, struct {
		arg1 context.Context
		arg2 *revokpb.CredentialCountRequest
	}{arg1, arg2})
	fake.recordInvocation("GetCredentialCounts", []interface{}{arg1, arg2})
	fake.getCredentialCountsMutex.Unlock()
	if fake.GetCredentialCountsStub != nil {
		return fake.GetCredentialCountsStub(arg1, arg2)
	} else {
		return fake.getCredentialCountsReturns.result1, fake.getCredentialCountsReturns.result2
	}
}

func (fake *FakeRevokServer) GetCredentialCountsCallCount() int {
	fake.getCredentialCountsMutex.RLock()
	defer fake.getCredentialCountsMutex.RUnlock()
	return len(fake.getCredentialCountsArgsForCall)
}

func (fake *FakeRevokServer) GetCredentialCountsArgsForCall(i int) (context.Context, *revokpb.CredentialCountRequest) {
	fake.getCredentialCountsMutex.RLock()
	defer fake.getCredentialCountsMutex.RUnlock()
	return fake.getCredentialCountsArgsForCall[i].arg1, fake.getCredentialCountsArgsForCall[i].arg2
}

func (fake *FakeRevokServer) GetCredentialCountsReturns(result1 *revokpb.CredentialCountResponse, result2 error) {
	fake.GetCredentialCountsStub = nil
	fake.getCredentialCountsReturns = struct {
		result1 *revokpb.CredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRevokServer) GetOrganizationCredentialCounts(arg1 context.Context, arg2 *revokpb.OrganizationCredentialCountRequest) (*revokpb.OrganizationCredentialCountResponse, error) {
	fake.getOrganizationCredentialCountsMutex.Lock()
	fake.getOrganizationCredentialCountsArgsForCall = append(fake.getOrganizationCredentialCountsArgsForCall, struct {
		arg1 context.Context
		arg2 *revokpb.OrganizationCredentialCountRequest
	}{arg1, arg2})
	fake.recordInvocation("GetOrganizationCredentialCounts", []interface{}{arg1, arg2})
	fake.getOrganizationCredentialCountsMutex.Unlock()
	if fake.GetOrganizationCredentialCountsStub != nil {
		return fake.GetOrganizationCredentialCountsStub(arg1, arg2)
	} else {
		return fake.getOrganizationCredentialCountsReturns.result1, fake.getOrganizationCredentialCountsReturns.result2
	}
}

func (fake *FakeRevokServer) GetOrganizationCredentialCountsCallCount() int {
	fake.getOrganizationCredentialCountsMutex.RLock()
	defer fake.getOrganizationCredentialCountsMutex.RUnlock()
	return len(fake.getOrganizationCredentialCountsArgsForCall)
}

func (fake *FakeRevokServer) GetOrganizationCredentialCountsArgsForCall(i int) (context.Context, *revokpb.OrganizationCredentialCountRequest) {
	fake.getOrganizationCredentialCountsMutex.RLock()
	defer fake.getOrganizationCredentialCountsMutex.RUnlock()
	return fake.getOrganizationCredentialCountsArgsForCall[i].arg1, fake.getOrganizationCredentialCountsArgsForCall[i].arg2
}

func (fake *FakeRevokServer) GetOrganizationCredentialCountsReturns(result1 *revokpb.OrganizationCredentialCountResponse, result2 error) {
	fake.GetOrganizationCredentialCountsStub = nil
	fake.getOrganizationCredentialCountsReturns = struct {
		result1 *revokpb.OrganizationCredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRevokServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCredentialCountsMutex.RLock()
	defer fake.getCredentialCountsMutex.RUnlock()
	fake.getOrganizationCredentialCountsMutex.RLock()
	defer fake.getOrganizationCredentialCountsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRevokServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ revok.RevokServer = new(FakeRevokServer)
