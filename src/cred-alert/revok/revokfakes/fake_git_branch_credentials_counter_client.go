// Code generated by counterfeiter. DO NOT EDIT.
package revokfakes

import (
	"cred-alert/gitclient"
	"cred-alert/revok"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeGitBranchCredentialsCounterClient struct {
	BranchTargetsStub        func(repoPath string) (map[string]string, error)
	branchTargetsMutex       sync.RWMutex
	branchTargetsArgsForCall []struct {
		repoPath string
	}
	branchTargetsReturns struct {
		result1 map[string]string
		result2 error
	}
	branchTargetsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	BranchCredentialCountsStub        func(lager.Logger, string, gitclient.Sniffer) (map[string]uint, error)
	branchCredentialCountsMutex       sync.RWMutex
	branchCredentialCountsArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 gitclient.Sniffer
	}
	branchCredentialCountsReturns struct {
		result1 map[string]uint
		result2 error
	}
	branchCredentialCountsReturnsOnCall map[int]struct {
		result1 map[string]uint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchTargets(repoPath string) (map[string]string, error) {
	fake.branchTargetsMutex.Lock()
	ret, specificReturn := fake.branchTargetsReturnsOnCall[len(fake.branchTargetsArgsForCall)]
	fake.branchTargetsArgsForCall = append(fake.branchTargetsArgsForCall, struct {
		repoPath string
	}{repoPath})
	fake.recordInvocation("BranchTargets", []interface{}{repoPath})
	fake.branchTargetsMutex.Unlock()
	if fake.BranchTargetsStub != nil {
		return fake.BranchTargetsStub(repoPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.branchTargetsReturns.result1, fake.branchTargetsReturns.result2
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchTargetsCallCount() int {
	fake.branchTargetsMutex.RLock()
	defer fake.branchTargetsMutex.RUnlock()
	return len(fake.branchTargetsArgsForCall)
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchTargetsArgsForCall(i int) string {
	fake.branchTargetsMutex.RLock()
	defer fake.branchTargetsMutex.RUnlock()
	return fake.branchTargetsArgsForCall[i].repoPath
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchTargetsReturns(result1 map[string]string, result2 error) {
	fake.BranchTargetsStub = nil
	fake.branchTargetsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchTargetsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.BranchTargetsStub = nil
	if fake.branchTargetsReturnsOnCall == nil {
		fake.branchTargetsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.branchTargetsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchCredentialCounts(arg1 lager.Logger, arg2 string, arg3 gitclient.Sniffer) (map[string]uint, error) {
	fake.branchCredentialCountsMutex.Lock()
	ret, specificReturn := fake.branchCredentialCountsReturnsOnCall[len(fake.branchCredentialCountsArgsForCall)]
	fake.branchCredentialCountsArgsForCall = append(fake.branchCredentialCountsArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 gitclient.Sniffer
	}{arg1, arg2, arg3})
	fake.recordInvocation("BranchCredentialCounts", []interface{}{arg1, arg2, arg3})
	fake.branchCredentialCountsMutex.Unlock()
	if fake.BranchCredentialCountsStub != nil {
		return fake.BranchCredentialCountsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.branchCredentialCountsReturns.result1, fake.branchCredentialCountsReturns.result2
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchCredentialCountsCallCount() int {
	fake.branchCredentialCountsMutex.RLock()
	defer fake.branchCredentialCountsMutex.RUnlock()
	return len(fake.branchCredentialCountsArgsForCall)
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchCredentialCountsArgsForCall(i int) (lager.Logger, string, gitclient.Sniffer) {
	fake.branchCredentialCountsMutex.RLock()
	defer fake.branchCredentialCountsMutex.RUnlock()
	return fake.branchCredentialCountsArgsForCall[i].arg1, fake.branchCredentialCountsArgsForCall[i].arg2, fake.branchCredentialCountsArgsForCall[i].arg3
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchCredentialCountsReturns(result1 map[string]uint, result2 error) {
	fake.BranchCredentialCountsStub = nil
	fake.branchCredentialCountsReturns = struct {
		result1 map[string]uint
		result2 error
	}{result1, result2}
}

func (fake *FakeGitBranchCredentialsCounterClient) BranchCredentialCountsReturnsOnCall(i int, result1 map[string]uint, result2 error) {
	fake.BranchCredentialCountsStub = nil
	if fake.branchCredentialCountsReturnsOnCall == nil {
		fake.branchCredentialCountsReturnsOnCall = make(map[int]struct {
			result1 map[string]uint
			result2 error
		})
	}
	fake.branchCredentialCountsReturnsOnCall[i] = struct {
		result1 map[string]uint
		result2 error
	}{result1, result2}
}

func (fake *FakeGitBranchCredentialsCounterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.branchTargetsMutex.RLock()
	defer fake.branchTargetsMutex.RUnlock()
	fake.branchCredentialCountsMutex.RLock()
	defer fake.branchCredentialCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitBranchCredentialsCounterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ revok.GitBranchCredentialsCounterClient = new(FakeGitBranchCredentialsCounterClient)
