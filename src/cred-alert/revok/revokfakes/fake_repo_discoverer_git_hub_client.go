// Code generated by counterfeiter. DO NOT EDIT.
package revokfakes

import (
	"cred-alert/revok"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeRepoDiscovererGitHubClient struct {
	ListRepositoriesByOrgStub        func(lager.Logger, string) ([]revok.GitHubRepository, error)
	listRepositoriesByOrgMutex       sync.RWMutex
	listRepositoriesByOrgArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	listRepositoriesByOrgReturns struct {
		result1 []revok.GitHubRepository
		result2 error
	}
	listRepositoriesByOrgReturnsOnCall map[int]struct {
		result1 []revok.GitHubRepository
		result2 error
	}
	ListRepositoriesByUserStub        func(lager.Logger, string) ([]revok.GitHubRepository, error)
	listRepositoriesByUserMutex       sync.RWMutex
	listRepositoriesByUserArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	listRepositoriesByUserReturns struct {
		result1 []revok.GitHubRepository
		result2 error
	}
	listRepositoriesByUserReturnsOnCall map[int]struct {
		result1 []revok.GitHubRepository
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByOrg(arg1 lager.Logger, arg2 string) ([]revok.GitHubRepository, error) {
	fake.listRepositoriesByOrgMutex.Lock()
	ret, specificReturn := fake.listRepositoriesByOrgReturnsOnCall[len(fake.listRepositoriesByOrgArgsForCall)]
	fake.listRepositoriesByOrgArgsForCall = append(fake.listRepositoriesByOrgArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListRepositoriesByOrg", []interface{}{arg1, arg2})
	fake.listRepositoriesByOrgMutex.Unlock()
	if fake.ListRepositoriesByOrgStub != nil {
		return fake.ListRepositoriesByOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listRepositoriesByOrgReturns.result1, fake.listRepositoriesByOrgReturns.result2
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByOrgCallCount() int {
	fake.listRepositoriesByOrgMutex.RLock()
	defer fake.listRepositoriesByOrgMutex.RUnlock()
	return len(fake.listRepositoriesByOrgArgsForCall)
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByOrgArgsForCall(i int) (lager.Logger, string) {
	fake.listRepositoriesByOrgMutex.RLock()
	defer fake.listRepositoriesByOrgMutex.RUnlock()
	return fake.listRepositoriesByOrgArgsForCall[i].arg1, fake.listRepositoriesByOrgArgsForCall[i].arg2
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByOrgReturns(result1 []revok.GitHubRepository, result2 error) {
	fake.ListRepositoriesByOrgStub = nil
	fake.listRepositoriesByOrgReturns = struct {
		result1 []revok.GitHubRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByOrgReturnsOnCall(i int, result1 []revok.GitHubRepository, result2 error) {
	fake.ListRepositoriesByOrgStub = nil
	if fake.listRepositoriesByOrgReturnsOnCall == nil {
		fake.listRepositoriesByOrgReturnsOnCall = make(map[int]struct {
			result1 []revok.GitHubRepository
			result2 error
		})
	}
	fake.listRepositoriesByOrgReturnsOnCall[i] = struct {
		result1 []revok.GitHubRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByUser(arg1 lager.Logger, arg2 string) ([]revok.GitHubRepository, error) {
	fake.listRepositoriesByUserMutex.Lock()
	ret, specificReturn := fake.listRepositoriesByUserReturnsOnCall[len(fake.listRepositoriesByUserArgsForCall)]
	fake.listRepositoriesByUserArgsForCall = append(fake.listRepositoriesByUserArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListRepositoriesByUser", []interface{}{arg1, arg2})
	fake.listRepositoriesByUserMutex.Unlock()
	if fake.ListRepositoriesByUserStub != nil {
		return fake.ListRepositoriesByUserStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listRepositoriesByUserReturns.result1, fake.listRepositoriesByUserReturns.result2
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByUserCallCount() int {
	fake.listRepositoriesByUserMutex.RLock()
	defer fake.listRepositoriesByUserMutex.RUnlock()
	return len(fake.listRepositoriesByUserArgsForCall)
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByUserArgsForCall(i int) (lager.Logger, string) {
	fake.listRepositoriesByUserMutex.RLock()
	defer fake.listRepositoriesByUserMutex.RUnlock()
	return fake.listRepositoriesByUserArgsForCall[i].arg1, fake.listRepositoriesByUserArgsForCall[i].arg2
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByUserReturns(result1 []revok.GitHubRepository, result2 error) {
	fake.ListRepositoriesByUserStub = nil
	fake.listRepositoriesByUserReturns = struct {
		result1 []revok.GitHubRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeRepoDiscovererGitHubClient) ListRepositoriesByUserReturnsOnCall(i int, result1 []revok.GitHubRepository, result2 error) {
	fake.ListRepositoriesByUserStub = nil
	if fake.listRepositoriesByUserReturnsOnCall == nil {
		fake.listRepositoriesByUserReturnsOnCall = make(map[int]struct {
			result1 []revok.GitHubRepository
			result2 error
		})
	}
	fake.listRepositoriesByUserReturnsOnCall[i] = struct {
		result1 []revok.GitHubRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeRepoDiscovererGitHubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listRepositoriesByOrgMutex.RLock()
	defer fake.listRepositoriesByOrgMutex.RUnlock()
	fake.listRepositoriesByUserMutex.RLock()
	defer fake.listRepositoriesByUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepoDiscovererGitHubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ revok.RepoDiscovererGitHubClient = new(FakeRepoDiscovererGitHubClient)
