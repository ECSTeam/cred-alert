// This file was generated by counterfeiter
package revokfakes

import (
	"cred-alert/revok"
	"sync"
)

type FakeScheduler struct {
	ScheduleWorkStub        func(string, func())
	scheduleWorkMutex       sync.RWMutex
	scheduleWorkArgsForCall []struct {
		arg1 string
		arg2 func()
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScheduler) ScheduleWork(arg1 string, arg2 func()) {
	fake.scheduleWorkMutex.Lock()
	fake.scheduleWorkArgsForCall = append(fake.scheduleWorkArgsForCall, struct {
		arg1 string
		arg2 func()
	}{arg1, arg2})
	fake.recordInvocation("ScheduleWork", []interface{}{arg1, arg2})
	fake.scheduleWorkMutex.Unlock()
	if fake.ScheduleWorkStub != nil {
		fake.ScheduleWorkStub(arg1, arg2)
	}
}

func (fake *FakeScheduler) ScheduleWorkCallCount() int {
	fake.scheduleWorkMutex.RLock()
	defer fake.scheduleWorkMutex.RUnlock()
	return len(fake.scheduleWorkArgsForCall)
}

func (fake *FakeScheduler) ScheduleWorkArgsForCall(i int) (string, func()) {
	fake.scheduleWorkMutex.RLock()
	defer fake.scheduleWorkMutex.RUnlock()
	return fake.scheduleWorkArgsForCall[i].arg1, fake.scheduleWorkArgsForCall[i].arg2
}

func (fake *FakeScheduler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scheduleWorkMutex.RLock()
	defer fake.scheduleWorkMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeScheduler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ revok.Scheduler = new(FakeScheduler)
