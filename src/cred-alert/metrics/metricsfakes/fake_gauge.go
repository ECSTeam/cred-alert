// This file was generated by counterfeiter
package metricsfakes

import (
	"cred-alert/metrics"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeGauge struct {
	UpdateStub        func(lager.Logger, float32, ...string)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 lager.Logger
		arg2 float32
		arg3 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGauge) Update(arg1 lager.Logger, arg2 float32, arg3 ...string) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 lager.Logger
		arg2 float32
		arg3 []string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		fake.UpdateStub(arg1, arg2, arg3...)
	}
}

func (fake *FakeGauge) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeGauge) UpdateArgsForCall(i int) (lager.Logger, float32, []string) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1, fake.updateArgsForCall[i].arg2, fake.updateArgsForCall[i].arg3
}

func (fake *FakeGauge) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGauge) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.Gauge = new(FakeGauge)
