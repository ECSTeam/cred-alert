// This file was generated by counterfeiter
package metricsfakes

import (
	"cred-alert/metrics"
	"sync"

	"github.com/pivotal-golang/lager"
)

type FakeTimer struct {
	TimeStub        func(lager.Logger, func(), ...string)
	timeMutex       sync.RWMutex
	timeArgsForCall []struct {
		arg1 lager.Logger
		arg2 func()
		arg3 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTimer) Time(arg1 lager.Logger, arg2 func(), arg3 ...string) {
	fake.timeMutex.Lock()
	fake.timeArgsForCall = append(fake.timeArgsForCall, struct {
		arg1 lager.Logger
		arg2 func()
		arg3 []string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Time", []interface{}{arg1, arg2, arg3})
	fake.timeMutex.Unlock()
	if fake.TimeStub != nil {
		fake.TimeStub(arg1, arg2, arg3...)
	}
}

func (fake *FakeTimer) TimeCallCount() int {
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	return len(fake.timeArgsForCall)
}

func (fake *FakeTimer) TimeArgsForCall(i int) (lager.Logger, func(), []string) {
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	return fake.timeArgsForCall[i].arg1, fake.timeArgsForCall[i].arg2, fake.timeArgsForCall[i].arg3
}

func (fake *FakeTimer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTimer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.Timer = new(FakeTimer)
