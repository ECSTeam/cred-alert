// This file was generated by counterfeiter
package notificationsfakes

import (
	"cred-alert/notifications"
	"sync"
)

type FakeWhitelist struct {
	ShouldSkipNotificationStub        func(bool, string) bool
	shouldSkipNotificationMutex       sync.RWMutex
	shouldSkipNotificationArgsForCall []struct {
		arg1 bool
		arg2 string
	}
	shouldSkipNotificationReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWhitelist) ShouldSkipNotification(arg1 bool, arg2 string) bool {
	fake.shouldSkipNotificationMutex.Lock()
	fake.shouldSkipNotificationArgsForCall = append(fake.shouldSkipNotificationArgsForCall, struct {
		arg1 bool
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ShouldSkipNotification", []interface{}{arg1, arg2})
	fake.shouldSkipNotificationMutex.Unlock()
	if fake.ShouldSkipNotificationStub != nil {
		return fake.ShouldSkipNotificationStub(arg1, arg2)
	}
	return fake.shouldSkipNotificationReturns.result1
}

func (fake *FakeWhitelist) ShouldSkipNotificationCallCount() int {
	fake.shouldSkipNotificationMutex.RLock()
	defer fake.shouldSkipNotificationMutex.RUnlock()
	return len(fake.shouldSkipNotificationArgsForCall)
}

func (fake *FakeWhitelist) ShouldSkipNotificationArgsForCall(i int) (bool, string) {
	fake.shouldSkipNotificationMutex.RLock()
	defer fake.shouldSkipNotificationMutex.RUnlock()
	return fake.shouldSkipNotificationArgsForCall[i].arg1, fake.shouldSkipNotificationArgsForCall[i].arg2
}

func (fake *FakeWhitelist) ShouldSkipNotificationReturns(result1 bool) {
	fake.ShouldSkipNotificationStub = nil
	fake.shouldSkipNotificationReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeWhitelist) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.shouldSkipNotificationMutex.RLock()
	defer fake.shouldSkipNotificationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWhitelist) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ notifications.Whitelist = new(FakeWhitelist)
