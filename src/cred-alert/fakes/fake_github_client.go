// This file was generated by counterfeiter
package fakes

import (
	"cred-alert/github"
	"sync"
)

type FakeGithubClient struct {
	CompareRefsStub        func(owner, repo, base, head string) (string, error)
	compareRefsMutex       sync.RWMutex
	compareRefsArgsForCall []struct {
		owner string
		repo  string
		base  string
		head  string
	}
	compareRefsReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGithubClient) CompareRefs(owner string, repo string, base string, head string) (string, error) {
	fake.compareRefsMutex.Lock()
	fake.compareRefsArgsForCall = append(fake.compareRefsArgsForCall, struct {
		owner string
		repo  string
		base  string
		head  string
	}{owner, repo, base, head})
	fake.recordInvocation("CompareRefs", []interface{}{owner, repo, base, head})
	fake.compareRefsMutex.Unlock()
	if fake.CompareRefsStub != nil {
		return fake.CompareRefsStub(owner, repo, base, head)
	} else {
		return fake.compareRefsReturns.result1, fake.compareRefsReturns.result2
	}
}

func (fake *FakeGithubClient) CompareRefsCallCount() int {
	fake.compareRefsMutex.RLock()
	defer fake.compareRefsMutex.RUnlock()
	return len(fake.compareRefsArgsForCall)
}

func (fake *FakeGithubClient) CompareRefsArgsForCall(i int) (string, string, string, string) {
	fake.compareRefsMutex.RLock()
	defer fake.compareRefsMutex.RUnlock()
	return fake.compareRefsArgsForCall[i].owner, fake.compareRefsArgsForCall[i].repo, fake.compareRefsArgsForCall[i].base, fake.compareRefsArgsForCall[i].head
}

func (fake *FakeGithubClient) CompareRefsReturns(result1 string, result2 error) {
	fake.CompareRefsStub = nil
	fake.compareRefsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGithubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compareRefsMutex.RLock()
	defer fake.compareRefsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGithubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.Client = new(FakeGithubClient)
