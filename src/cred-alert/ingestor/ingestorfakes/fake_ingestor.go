// This file was generated by counterfeiter
package ingestorfakes

import (
	"cred-alert/ingestor"
	"sync"

	"github.com/pivotal-golang/lager"
)

type FakeIngestor struct {
	IngestPushScanStub        func(lager.Logger, ingestor.PushScan)
	ingestPushScanMutex       sync.RWMutex
	ingestPushScanArgsForCall []struct {
		arg1 lager.Logger
		arg2 ingestor.PushScan
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIngestor) IngestPushScan(arg1 lager.Logger, arg2 ingestor.PushScan) {
	fake.ingestPushScanMutex.Lock()
	fake.ingestPushScanArgsForCall = append(fake.ingestPushScanArgsForCall, struct {
		arg1 lager.Logger
		arg2 ingestor.PushScan
	}{arg1, arg2})
	fake.recordInvocation("IngestPushScan", []interface{}{arg1, arg2})
	fake.ingestPushScanMutex.Unlock()
	if fake.IngestPushScanStub != nil {
		fake.IngestPushScanStub(arg1, arg2)
	}
}

func (fake *FakeIngestor) IngestPushScanCallCount() int {
	fake.ingestPushScanMutex.RLock()
	defer fake.ingestPushScanMutex.RUnlock()
	return len(fake.ingestPushScanArgsForCall)
}

func (fake *FakeIngestor) IngestPushScanArgsForCall(i int) (lager.Logger, ingestor.PushScan) {
	fake.ingestPushScanMutex.RLock()
	defer fake.ingestPushScanMutex.RUnlock()
	return fake.ingestPushScanArgsForCall[i].arg1, fake.ingestPushScanArgsForCall[i].arg2
}

func (fake *FakeIngestor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ingestPushScanMutex.RLock()
	defer fake.ingestPushScanMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIngestor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ingestor.Ingestor = new(FakeIngestor)
