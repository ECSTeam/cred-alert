// This file was generated by counterfeiter
package inflatorfakes

import (
	"cred-alert/inflator"
	"sync"
)

type FakeScratchSpace struct {
	MakeStub        func() (string, error)
	makeMutex       sync.RWMutex
	makeArgsForCall []struct{}
	makeReturns     struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScratchSpace) Make() (string, error) {
	fake.makeMutex.Lock()
	fake.makeArgsForCall = append(fake.makeArgsForCall, struct{}{})
	fake.recordInvocation("Make", []interface{}{})
	fake.makeMutex.Unlock()
	if fake.MakeStub != nil {
		return fake.MakeStub()
	} else {
		return fake.makeReturns.result1, fake.makeReturns.result2
	}
}

func (fake *FakeScratchSpace) MakeCallCount() int {
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	return len(fake.makeArgsForCall)
}

func (fake *FakeScratchSpace) MakeReturns(result1 string, result2 error) {
	fake.MakeStub = nil
	fake.makeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeScratchSpace) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeScratchSpace) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ inflator.ScratchSpace = new(FakeScratchSpace)
