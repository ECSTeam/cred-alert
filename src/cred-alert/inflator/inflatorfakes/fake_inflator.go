// This file was generated by counterfeiter
package inflatorfakes

import (
	"cred-alert/inflator"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeInflator struct {
	InflateStub        func(lager.Logger, string, string, string) error
	inflateMutex       sync.RWMutex
	inflateArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 string
		arg4 string
	}
	inflateReturns struct {
		result1 error
	}
	LogPathStub        func() string
	logPathMutex       sync.RWMutex
	logPathArgsForCall []struct{}
	logPathReturns     struct {
		result1 string
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInflator) Inflate(arg1 lager.Logger, arg2 string, arg3 string, arg4 string) error {
	fake.inflateMutex.Lock()
	fake.inflateArgsForCall = append(fake.inflateArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Inflate", []interface{}{arg1, arg2, arg3, arg4})
	fake.inflateMutex.Unlock()
	if fake.InflateStub != nil {
		return fake.InflateStub(arg1, arg2, arg3, arg4)
	}
	return fake.inflateReturns.result1
}

func (fake *FakeInflator) InflateCallCount() int {
	fake.inflateMutex.RLock()
	defer fake.inflateMutex.RUnlock()
	return len(fake.inflateArgsForCall)
}

func (fake *FakeInflator) InflateArgsForCall(i int) (lager.Logger, string, string, string) {
	fake.inflateMutex.RLock()
	defer fake.inflateMutex.RUnlock()
	return fake.inflateArgsForCall[i].arg1, fake.inflateArgsForCall[i].arg2, fake.inflateArgsForCall[i].arg3, fake.inflateArgsForCall[i].arg4
}

func (fake *FakeInflator) InflateReturns(result1 error) {
	fake.InflateStub = nil
	fake.inflateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInflator) LogPath() string {
	fake.logPathMutex.Lock()
	fake.logPathArgsForCall = append(fake.logPathArgsForCall, struct{}{})
	fake.recordInvocation("LogPath", []interface{}{})
	fake.logPathMutex.Unlock()
	if fake.LogPathStub != nil {
		return fake.LogPathStub()
	}
	return fake.logPathReturns.result1
}

func (fake *FakeInflator) LogPathCallCount() int {
	fake.logPathMutex.RLock()
	defer fake.logPathMutex.RUnlock()
	return len(fake.logPathArgsForCall)
}

func (fake *FakeInflator) LogPathReturns(result1 string) {
	fake.LogPathStub = nil
	fake.logPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInflator) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	return fake.closeReturns.result1
}

func (fake *FakeInflator) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeInflator) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInflator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.inflateMutex.RLock()
	defer fake.inflateMutex.RUnlock()
	fake.logPathMutex.RLock()
	defer fake.logPathMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInflator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ inflator.Inflator = new(FakeInflator)
