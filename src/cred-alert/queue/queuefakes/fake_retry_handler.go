// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"

	"cloud.google.com/go/pubsub"
	"code.cloudfoundry.org/lager"
)

type FakeRetryHandler struct {
	ProcessMessageStub        func(lager.Logger, *pubsub.Message)
	processMessageMutex       sync.RWMutex
	processMessageArgsForCall []struct {
		arg1 lager.Logger
		arg2 *pubsub.Message
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetryHandler) ProcessMessage(arg1 lager.Logger, arg2 *pubsub.Message) {
	fake.processMessageMutex.Lock()
	fake.processMessageArgsForCall = append(fake.processMessageArgsForCall, struct {
		arg1 lager.Logger
		arg2 *pubsub.Message
	}{arg1, arg2})
	fake.recordInvocation("ProcessMessage", []interface{}{arg1, arg2})
	fake.processMessageMutex.Unlock()
	if fake.ProcessMessageStub != nil {
		fake.ProcessMessageStub(arg1, arg2)
	}
}

func (fake *FakeRetryHandler) ProcessMessageCallCount() int {
	fake.processMessageMutex.RLock()
	defer fake.processMessageMutex.RUnlock()
	return len(fake.processMessageArgsForCall)
}

func (fake *FakeRetryHandler) ProcessMessageArgsForCall(i int) (lager.Logger, *pubsub.Message) {
	fake.processMessageMutex.RLock()
	defer fake.processMessageMutex.RUnlock()
	return fake.processMessageArgsForCall[i].arg1, fake.processMessageArgsForCall[i].arg2
}

func (fake *FakeRetryHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processMessageMutex.RLock()
	defer fake.processMessageMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRetryHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.RetryHandler = new(FakeRetryHandler)
