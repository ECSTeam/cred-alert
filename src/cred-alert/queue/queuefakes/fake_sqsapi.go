// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"

	"github.com/aws/aws-sdk-go/service/sqs"
)

type FakeSQSAPI struct {
	GetQueueUrlStub        func(*sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error)
	getQueueUrlMutex       sync.RWMutex
	getQueueUrlArgsForCall []struct {
		arg1 *sqs.GetQueueUrlInput
	}
	getQueueUrlReturns struct {
		result1 *sqs.GetQueueUrlOutput
		result2 error
	}
	SendMessageStub        func(*sqs.SendMessageInput) (*sqs.SendMessageOutput, error)
	sendMessageMutex       sync.RWMutex
	sendMessageArgsForCall []struct {
		arg1 *sqs.SendMessageInput
	}
	sendMessageReturns struct {
		result1 *sqs.SendMessageOutput
		result2 error
	}
	ReceiveMessageStub        func(*sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error)
	receiveMessageMutex       sync.RWMutex
	receiveMessageArgsForCall []struct {
		arg1 *sqs.ReceiveMessageInput
	}
	receiveMessageReturns struct {
		result1 *sqs.ReceiveMessageOutput
		result2 error
	}
	DeleteMessageStub        func(*sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error)
	deleteMessageMutex       sync.RWMutex
	deleteMessageArgsForCall []struct {
		arg1 *sqs.DeleteMessageInput
	}
	deleteMessageReturns struct {
		result1 *sqs.DeleteMessageOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSQSAPI) GetQueueUrl(arg1 *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {
	fake.getQueueUrlMutex.Lock()
	fake.getQueueUrlArgsForCall = append(fake.getQueueUrlArgsForCall, struct {
		arg1 *sqs.GetQueueUrlInput
	}{arg1})
	fake.recordInvocation("GetQueueUrl", []interface{}{arg1})
	fake.getQueueUrlMutex.Unlock()
	if fake.GetQueueUrlStub != nil {
		return fake.GetQueueUrlStub(arg1)
	} else {
		return fake.getQueueUrlReturns.result1, fake.getQueueUrlReturns.result2
	}
}

func (fake *FakeSQSAPI) GetQueueUrlCallCount() int {
	fake.getQueueUrlMutex.RLock()
	defer fake.getQueueUrlMutex.RUnlock()
	return len(fake.getQueueUrlArgsForCall)
}

func (fake *FakeSQSAPI) GetQueueUrlArgsForCall(i int) *sqs.GetQueueUrlInput {
	fake.getQueueUrlMutex.RLock()
	defer fake.getQueueUrlMutex.RUnlock()
	return fake.getQueueUrlArgsForCall[i].arg1
}

func (fake *FakeSQSAPI) GetQueueUrlReturns(result1 *sqs.GetQueueUrlOutput, result2 error) {
	fake.GetQueueUrlStub = nil
	fake.getQueueUrlReturns = struct {
		result1 *sqs.GetQueueUrlOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSQSAPI) SendMessage(arg1 *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	fake.sendMessageMutex.Lock()
	fake.sendMessageArgsForCall = append(fake.sendMessageArgsForCall, struct {
		arg1 *sqs.SendMessageInput
	}{arg1})
	fake.recordInvocation("SendMessage", []interface{}{arg1})
	fake.sendMessageMutex.Unlock()
	if fake.SendMessageStub != nil {
		return fake.SendMessageStub(arg1)
	} else {
		return fake.sendMessageReturns.result1, fake.sendMessageReturns.result2
	}
}

func (fake *FakeSQSAPI) SendMessageCallCount() int {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return len(fake.sendMessageArgsForCall)
}

func (fake *FakeSQSAPI) SendMessageArgsForCall(i int) *sqs.SendMessageInput {
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	return fake.sendMessageArgsForCall[i].arg1
}

func (fake *FakeSQSAPI) SendMessageReturns(result1 *sqs.SendMessageOutput, result2 error) {
	fake.SendMessageStub = nil
	fake.sendMessageReturns = struct {
		result1 *sqs.SendMessageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSQSAPI) ReceiveMessage(arg1 *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	fake.receiveMessageMutex.Lock()
	fake.receiveMessageArgsForCall = append(fake.receiveMessageArgsForCall, struct {
		arg1 *sqs.ReceiveMessageInput
	}{arg1})
	fake.recordInvocation("ReceiveMessage", []interface{}{arg1})
	fake.receiveMessageMutex.Unlock()
	if fake.ReceiveMessageStub != nil {
		return fake.ReceiveMessageStub(arg1)
	} else {
		return fake.receiveMessageReturns.result1, fake.receiveMessageReturns.result2
	}
}

func (fake *FakeSQSAPI) ReceiveMessageCallCount() int {
	fake.receiveMessageMutex.RLock()
	defer fake.receiveMessageMutex.RUnlock()
	return len(fake.receiveMessageArgsForCall)
}

func (fake *FakeSQSAPI) ReceiveMessageArgsForCall(i int) *sqs.ReceiveMessageInput {
	fake.receiveMessageMutex.RLock()
	defer fake.receiveMessageMutex.RUnlock()
	return fake.receiveMessageArgsForCall[i].arg1
}

func (fake *FakeSQSAPI) ReceiveMessageReturns(result1 *sqs.ReceiveMessageOutput, result2 error) {
	fake.ReceiveMessageStub = nil
	fake.receiveMessageReturns = struct {
		result1 *sqs.ReceiveMessageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSQSAPI) DeleteMessage(arg1 *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	fake.deleteMessageMutex.Lock()
	fake.deleteMessageArgsForCall = append(fake.deleteMessageArgsForCall, struct {
		arg1 *sqs.DeleteMessageInput
	}{arg1})
	fake.recordInvocation("DeleteMessage", []interface{}{arg1})
	fake.deleteMessageMutex.Unlock()
	if fake.DeleteMessageStub != nil {
		return fake.DeleteMessageStub(arg1)
	} else {
		return fake.deleteMessageReturns.result1, fake.deleteMessageReturns.result2
	}
}

func (fake *FakeSQSAPI) DeleteMessageCallCount() int {
	fake.deleteMessageMutex.RLock()
	defer fake.deleteMessageMutex.RUnlock()
	return len(fake.deleteMessageArgsForCall)
}

func (fake *FakeSQSAPI) DeleteMessageArgsForCall(i int) *sqs.DeleteMessageInput {
	fake.deleteMessageMutex.RLock()
	defer fake.deleteMessageMutex.RUnlock()
	return fake.deleteMessageArgsForCall[i].arg1
}

func (fake *FakeSQSAPI) DeleteMessageReturns(result1 *sqs.DeleteMessageOutput, result2 error) {
	fake.DeleteMessageStub = nil
	fake.deleteMessageReturns = struct {
		result1 *sqs.DeleteMessageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSQSAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getQueueUrlMutex.RLock()
	defer fake.getQueueUrlMutex.RUnlock()
	fake.sendMessageMutex.RLock()
	defer fake.sendMessageMutex.RUnlock()
	fake.receiveMessageMutex.RLock()
	defer fake.receiveMessageMutex.RUnlock()
	fake.deleteMessageMutex.RLock()
	defer fake.deleteMessageMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSQSAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.SQSAPI = new(FakeSQSAPI)
