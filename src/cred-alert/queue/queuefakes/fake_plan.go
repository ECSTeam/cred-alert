// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"
)

type FakePlan struct {
	TaskStub        func(string) queue.Task
	taskMutex       sync.RWMutex
	taskArgsForCall []struct {
		arg1 string
	}
	taskReturns struct {
		result1 queue.Task
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlan) Task(arg1 string) queue.Task {
	fake.taskMutex.Lock()
	fake.taskArgsForCall = append(fake.taskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Task", []interface{}{arg1})
	fake.taskMutex.Unlock()
	if fake.TaskStub != nil {
		return fake.TaskStub(arg1)
	}
	return fake.taskReturns.result1
}

func (fake *FakePlan) TaskCallCount() int {
	fake.taskMutex.RLock()
	defer fake.taskMutex.RUnlock()
	return len(fake.taskArgsForCall)
}

func (fake *FakePlan) TaskArgsForCall(i int) string {
	fake.taskMutex.RLock()
	defer fake.taskMutex.RUnlock()
	return fake.taskArgsForCall[i].arg1
}

func (fake *FakePlan) TaskReturns(result1 queue.Task) {
	fake.TaskStub = nil
	fake.taskReturns = struct {
		result1 queue.Task
	}{result1}
}

func (fake *FakePlan) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.taskMutex.RLock()
	defer fake.taskMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePlan) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Plan = new(FakePlan)
