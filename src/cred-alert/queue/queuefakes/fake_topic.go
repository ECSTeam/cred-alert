// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"

	"cloud.google.com/go/pubsub"
	"golang.org/x/net/context"
)

type FakeTopic struct {
	PublishStub        func(context.Context, ...*pubsub.Message) ([]string, error)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 context.Context
		arg2 []*pubsub.Message
	}
	publishReturns struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTopic) Publish(arg1 context.Context, arg2 ...*pubsub.Message) ([]string, error) {
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 context.Context
		arg2 []*pubsub.Message
	}{arg1, arg2})
	fake.recordInvocation("Publish", []interface{}{arg1, arg2})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(arg1, arg2...)
	} else {
		return fake.publishReturns.result1, fake.publishReturns.result2
	}
}

func (fake *FakeTopic) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeTopic) PublishArgsForCall(i int) (context.Context, []*pubsub.Message) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].arg1, fake.publishArgsForCall[i].arg2
}

func (fake *FakeTopic) PublishReturns(result1 []string, result2 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeTopic) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTopic) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Topic = new(FakeTopic)
