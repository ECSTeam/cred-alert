// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"net/url"
	"sync"

	"github.com/google/go-github/github"
)

type FakeArchiver struct {
	GetArchiveLinkStub        func(owner, repo, archiveFormat string, opt *github.RepositoryContentGetOptions) (*url.URL, *github.Response, error)
	getArchiveLinkMutex       sync.RWMutex
	getArchiveLinkArgsForCall []struct {
		owner         string
		repo          string
		archiveFormat string
		opt           *github.RepositoryContentGetOptions
	}
	getArchiveLinkReturns struct {
		result1 *url.URL
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArchiver) GetArchiveLink(owner string, repo string, archiveFormat string, opt *github.RepositoryContentGetOptions) (*url.URL, *github.Response, error) {
	fake.getArchiveLinkMutex.Lock()
	fake.getArchiveLinkArgsForCall = append(fake.getArchiveLinkArgsForCall, struct {
		owner         string
		repo          string
		archiveFormat string
		opt           *github.RepositoryContentGetOptions
	}{owner, repo, archiveFormat, opt})
	fake.recordInvocation("GetArchiveLink", []interface{}{owner, repo, archiveFormat, opt})
	fake.getArchiveLinkMutex.Unlock()
	if fake.GetArchiveLinkStub != nil {
		return fake.GetArchiveLinkStub(owner, repo, archiveFormat, opt)
	} else {
		return fake.getArchiveLinkReturns.result1, fake.getArchiveLinkReturns.result2, fake.getArchiveLinkReturns.result3
	}
}

func (fake *FakeArchiver) GetArchiveLinkCallCount() int {
	fake.getArchiveLinkMutex.RLock()
	defer fake.getArchiveLinkMutex.RUnlock()
	return len(fake.getArchiveLinkArgsForCall)
}

func (fake *FakeArchiver) GetArchiveLinkArgsForCall(i int) (string, string, string, *github.RepositoryContentGetOptions) {
	fake.getArchiveLinkMutex.RLock()
	defer fake.getArchiveLinkMutex.RUnlock()
	return fake.getArchiveLinkArgsForCall[i].owner, fake.getArchiveLinkArgsForCall[i].repo, fake.getArchiveLinkArgsForCall[i].archiveFormat, fake.getArchiveLinkArgsForCall[i].opt
}

func (fake *FakeArchiver) GetArchiveLinkReturns(result1 *url.URL, result2 *github.Response, result3 error) {
	fake.GetArchiveLinkStub = nil
	fake.getArchiveLinkReturns = struct {
		result1 *url.URL
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeArchiver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getArchiveLinkMutex.RLock()
	defer fake.getArchiveLinkMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeArchiver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Archiver = new(FakeArchiver)
