// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"

	"cloud.google.com/go/pubsub"
)

type FakeHandler struct {
	ProcessMessageStub        func(*pubsub.Message) (bool, error)
	processMessageMutex       sync.RWMutex
	processMessageArgsForCall []struct {
		arg1 *pubsub.Message
	}
	processMessageReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) ProcessMessage(arg1 *pubsub.Message) (bool, error) {
	fake.processMessageMutex.Lock()
	fake.processMessageArgsForCall = append(fake.processMessageArgsForCall, struct {
		arg1 *pubsub.Message
	}{arg1})
	fake.recordInvocation("ProcessMessage", []interface{}{arg1})
	fake.processMessageMutex.Unlock()
	if fake.ProcessMessageStub != nil {
		return fake.ProcessMessageStub(arg1)
	} else {
		return fake.processMessageReturns.result1, fake.processMessageReturns.result2
	}
}

func (fake *FakeHandler) ProcessMessageCallCount() int {
	fake.processMessageMutex.RLock()
	defer fake.processMessageMutex.RUnlock()
	return len(fake.processMessageArgsForCall)
}

func (fake *FakeHandler) ProcessMessageArgsForCall(i int) *pubsub.Message {
	fake.processMessageMutex.RLock()
	defer fake.processMessageMutex.RUnlock()
	return fake.processMessageArgsForCall[i].arg1
}

func (fake *FakeHandler) ProcessMessageReturns(result1 bool, result2 error) {
	fake.ProcessMessageStub = nil
	fake.processMessageReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processMessageMutex.RLock()
	defer fake.processMessageMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Handler = new(FakeHandler)
