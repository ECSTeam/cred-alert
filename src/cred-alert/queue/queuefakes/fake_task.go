// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"
)

type FakeTask struct {
	DataStub        func() map[string]interface{}
	dataMutex       sync.RWMutex
	dataArgsForCall []struct{}
	dataReturns     struct {
		result1 map[string]interface{}
	}
	ReceiptStub        func() string
	receiptMutex       sync.RWMutex
	receiptArgsForCall []struct{}
	receiptReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTask) Data() map[string]interface{} {
	fake.dataMutex.Lock()
	fake.dataArgsForCall = append(fake.dataArgsForCall, struct{}{})
	fake.recordInvocation("Data", []interface{}{})
	fake.dataMutex.Unlock()
	if fake.DataStub != nil {
		return fake.DataStub()
	} else {
		return fake.dataReturns.result1
	}
}

func (fake *FakeTask) DataCallCount() int {
	fake.dataMutex.RLock()
	defer fake.dataMutex.RUnlock()
	return len(fake.dataArgsForCall)
}

func (fake *FakeTask) DataReturns(result1 map[string]interface{}) {
	fake.DataStub = nil
	fake.dataReturns = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeTask) Receipt() string {
	fake.receiptMutex.Lock()
	fake.receiptArgsForCall = append(fake.receiptArgsForCall, struct{}{})
	fake.recordInvocation("Receipt", []interface{}{})
	fake.receiptMutex.Unlock()
	if fake.ReceiptStub != nil {
		return fake.ReceiptStub()
	} else {
		return fake.receiptReturns.result1
	}
}

func (fake *FakeTask) ReceiptCallCount() int {
	fake.receiptMutex.RLock()
	defer fake.receiptMutex.RUnlock()
	return len(fake.receiptArgsForCall)
}

func (fake *FakeTask) ReceiptReturns(result1 string) {
	fake.ReceiptStub = nil
	fake.receiptReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTask) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dataMutex.RLock()
	defer fake.dataMutex.RUnlock()
	fake.receiptMutex.RLock()
	defer fake.receiptMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTask) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Task = new(FakeTask)
