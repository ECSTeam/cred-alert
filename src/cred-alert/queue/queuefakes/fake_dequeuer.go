// This file was generated by counterfeiter
package queuefakes

import (
	"cred-alert/queue"
	"sync"
)

type FakeDequeuer struct {
	DequeueStub        func() (queue.AckTask, error)
	dequeueMutex       sync.RWMutex
	dequeueArgsForCall []struct{}
	dequeueReturns     struct {
		result1 queue.AckTask
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDequeuer) Dequeue() (queue.AckTask, error) {
	fake.dequeueMutex.Lock()
	fake.dequeueArgsForCall = append(fake.dequeueArgsForCall, struct{}{})
	fake.recordInvocation("Dequeue", []interface{}{})
	fake.dequeueMutex.Unlock()
	if fake.DequeueStub != nil {
		return fake.DequeueStub()
	} else {
		return fake.dequeueReturns.result1, fake.dequeueReturns.result2
	}
}

func (fake *FakeDequeuer) DequeueCallCount() int {
	fake.dequeueMutex.RLock()
	defer fake.dequeueMutex.RUnlock()
	return len(fake.dequeueArgsForCall)
}

func (fake *FakeDequeuer) DequeueReturns(result1 queue.AckTask, result2 error) {
	fake.DequeueStub = nil
	fake.dequeueReturns = struct {
		result1 queue.AckTask
		result2 error
	}{result1, result2}
}

func (fake *FakeDequeuer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dequeueMutex.RLock()
	defer fake.dequeueMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDequeuer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queue.Dequeuer = new(FakeDequeuer)
