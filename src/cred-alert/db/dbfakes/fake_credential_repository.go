// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"
)

type FakeCredentialRepository struct {
	ForScanWithIDStub        func(int) ([]db.Credential, error)
	forScanWithIDMutex       sync.RWMutex
	forScanWithIDArgsForCall []struct {
		arg1 int
	}
	forScanWithIDReturns struct {
		result1 []db.Credential
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialRepository) ForScanWithID(arg1 int) ([]db.Credential, error) {
	fake.forScanWithIDMutex.Lock()
	fake.forScanWithIDArgsForCall = append(fake.forScanWithIDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ForScanWithID", []interface{}{arg1})
	fake.forScanWithIDMutex.Unlock()
	if fake.ForScanWithIDStub != nil {
		return fake.ForScanWithIDStub(arg1)
	} else {
		return fake.forScanWithIDReturns.result1, fake.forScanWithIDReturns.result2
	}
}

func (fake *FakeCredentialRepository) ForScanWithIDCallCount() int {
	fake.forScanWithIDMutex.RLock()
	defer fake.forScanWithIDMutex.RUnlock()
	return len(fake.forScanWithIDArgsForCall)
}

func (fake *FakeCredentialRepository) ForScanWithIDArgsForCall(i int) int {
	fake.forScanWithIDMutex.RLock()
	defer fake.forScanWithIDMutex.RUnlock()
	return fake.forScanWithIDArgsForCall[i].arg1
}

func (fake *FakeCredentialRepository) ForScanWithIDReturns(result1 []db.Credential, result2 error) {
	fake.ForScanWithIDStub = nil
	fake.forScanWithIDReturns = struct {
		result1 []db.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.forScanWithIDMutex.RLock()
	defer fake.forScanWithIDMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCredentialRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.CredentialRepository = new(FakeCredentialRepository)
