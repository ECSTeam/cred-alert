// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeCredentialRepository struct {
	RegisterCredentialStub        func(logger lager.Logger, credential *db.Credential) error
	registerCredentialMutex       sync.RWMutex
	registerCredentialArgsForCall []struct {
		logger     lager.Logger
		credential *db.Credential
	}
	registerCredentialReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialRepository) RegisterCredential(logger lager.Logger, credential *db.Credential) error {
	fake.registerCredentialMutex.Lock()
	fake.registerCredentialArgsForCall = append(fake.registerCredentialArgsForCall, struct {
		logger     lager.Logger
		credential *db.Credential
	}{logger, credential})
	fake.recordInvocation("RegisterCredential", []interface{}{logger, credential})
	fake.registerCredentialMutex.Unlock()
	if fake.RegisterCredentialStub != nil {
		return fake.RegisterCredentialStub(logger, credential)
	} else {
		return fake.registerCredentialReturns.result1
	}
}

func (fake *FakeCredentialRepository) RegisterCredentialCallCount() int {
	fake.registerCredentialMutex.RLock()
	defer fake.registerCredentialMutex.RUnlock()
	return len(fake.registerCredentialArgsForCall)
}

func (fake *FakeCredentialRepository) RegisterCredentialArgsForCall(i int) (lager.Logger, *db.Credential) {
	fake.registerCredentialMutex.RLock()
	defer fake.registerCredentialMutex.RUnlock()
	return fake.registerCredentialArgsForCall[i].logger, fake.registerCredentialArgsForCall[i].credential
}

func (fake *FakeCredentialRepository) RegisterCredentialReturns(result1 error) {
	fake.RegisterCredentialStub = nil
	fake.registerCredentialReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerCredentialMutex.RLock()
	defer fake.registerCredentialMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCredentialRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.CredentialRepository = new(FakeCredentialRepository)
