// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"cred-alert/db"
	"sync"
)

type FakeCredentialRepository struct {
	ForScanWithIDStub        func(int) ([]db.Credential, error)
	forScanWithIDMutex       sync.RWMutex
	forScanWithIDArgsForCall []struct {
		arg1 int
	}
	forScanWithIDReturns struct {
		result1 []db.Credential
		result2 error
	}
	forScanWithIDReturnsOnCall map[int]struct {
		result1 []db.Credential
		result2 error
	}
	UniqueSHAsForRepoAndRulesVersionStub        func(db.Repository, int) ([]string, error)
	uniqueSHAsForRepoAndRulesVersionMutex       sync.RWMutex
	uniqueSHAsForRepoAndRulesVersionArgsForCall []struct {
		arg1 db.Repository
		arg2 int
	}
	uniqueSHAsForRepoAndRulesVersionReturns struct {
		result1 []string
		result2 error
	}
	uniqueSHAsForRepoAndRulesVersionReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	CredentialReportedStub        func(cred *db.Credential) (bool, error)
	credentialReportedMutex       sync.RWMutex
	credentialReportedArgsForCall []struct {
		cred *db.Credential
	}
	credentialReportedReturns struct {
		result1 bool
		result2 error
	}
	credentialReportedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialRepository) ForScanWithID(arg1 int) ([]db.Credential, error) {
	fake.forScanWithIDMutex.Lock()
	ret, specificReturn := fake.forScanWithIDReturnsOnCall[len(fake.forScanWithIDArgsForCall)]
	fake.forScanWithIDArgsForCall = append(fake.forScanWithIDArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ForScanWithID", []interface{}{arg1})
	fake.forScanWithIDMutex.Unlock()
	if fake.ForScanWithIDStub != nil {
		return fake.ForScanWithIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.forScanWithIDReturns.result1, fake.forScanWithIDReturns.result2
}

func (fake *FakeCredentialRepository) ForScanWithIDCallCount() int {
	fake.forScanWithIDMutex.RLock()
	defer fake.forScanWithIDMutex.RUnlock()
	return len(fake.forScanWithIDArgsForCall)
}

func (fake *FakeCredentialRepository) ForScanWithIDArgsForCall(i int) int {
	fake.forScanWithIDMutex.RLock()
	defer fake.forScanWithIDMutex.RUnlock()
	return fake.forScanWithIDArgsForCall[i].arg1
}

func (fake *FakeCredentialRepository) ForScanWithIDReturns(result1 []db.Credential, result2 error) {
	fake.ForScanWithIDStub = nil
	fake.forScanWithIDReturns = struct {
		result1 []db.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) ForScanWithIDReturnsOnCall(i int, result1 []db.Credential, result2 error) {
	fake.ForScanWithIDStub = nil
	if fake.forScanWithIDReturnsOnCall == nil {
		fake.forScanWithIDReturnsOnCall = make(map[int]struct {
			result1 []db.Credential
			result2 error
		})
	}
	fake.forScanWithIDReturnsOnCall[i] = struct {
		result1 []db.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) UniqueSHAsForRepoAndRulesVersion(arg1 db.Repository, arg2 int) ([]string, error) {
	fake.uniqueSHAsForRepoAndRulesVersionMutex.Lock()
	ret, specificReturn := fake.uniqueSHAsForRepoAndRulesVersionReturnsOnCall[len(fake.uniqueSHAsForRepoAndRulesVersionArgsForCall)]
	fake.uniqueSHAsForRepoAndRulesVersionArgsForCall = append(fake.uniqueSHAsForRepoAndRulesVersionArgsForCall, struct {
		arg1 db.Repository
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("UniqueSHAsForRepoAndRulesVersion", []interface{}{arg1, arg2})
	fake.uniqueSHAsForRepoAndRulesVersionMutex.Unlock()
	if fake.UniqueSHAsForRepoAndRulesVersionStub != nil {
		return fake.UniqueSHAsForRepoAndRulesVersionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.uniqueSHAsForRepoAndRulesVersionReturns.result1, fake.uniqueSHAsForRepoAndRulesVersionReturns.result2
}

func (fake *FakeCredentialRepository) UniqueSHAsForRepoAndRulesVersionCallCount() int {
	fake.uniqueSHAsForRepoAndRulesVersionMutex.RLock()
	defer fake.uniqueSHAsForRepoAndRulesVersionMutex.RUnlock()
	return len(fake.uniqueSHAsForRepoAndRulesVersionArgsForCall)
}

func (fake *FakeCredentialRepository) UniqueSHAsForRepoAndRulesVersionArgsForCall(i int) (db.Repository, int) {
	fake.uniqueSHAsForRepoAndRulesVersionMutex.RLock()
	defer fake.uniqueSHAsForRepoAndRulesVersionMutex.RUnlock()
	return fake.uniqueSHAsForRepoAndRulesVersionArgsForCall[i].arg1, fake.uniqueSHAsForRepoAndRulesVersionArgsForCall[i].arg2
}

func (fake *FakeCredentialRepository) UniqueSHAsForRepoAndRulesVersionReturns(result1 []string, result2 error) {
	fake.UniqueSHAsForRepoAndRulesVersionStub = nil
	fake.uniqueSHAsForRepoAndRulesVersionReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) UniqueSHAsForRepoAndRulesVersionReturnsOnCall(i int, result1 []string, result2 error) {
	fake.UniqueSHAsForRepoAndRulesVersionStub = nil
	if fake.uniqueSHAsForRepoAndRulesVersionReturnsOnCall == nil {
		fake.uniqueSHAsForRepoAndRulesVersionReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.uniqueSHAsForRepoAndRulesVersionReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) CredentialReported(cred *db.Credential) (bool, error) {
	fake.credentialReportedMutex.Lock()
	ret, specificReturn := fake.credentialReportedReturnsOnCall[len(fake.credentialReportedArgsForCall)]
	fake.credentialReportedArgsForCall = append(fake.credentialReportedArgsForCall, struct {
		cred *db.Credential
	}{cred})
	fake.recordInvocation("CredentialReported", []interface{}{cred})
	fake.credentialReportedMutex.Unlock()
	if fake.CredentialReportedStub != nil {
		return fake.CredentialReportedStub(cred)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.credentialReportedReturns.result1, fake.credentialReportedReturns.result2
}

func (fake *FakeCredentialRepository) CredentialReportedCallCount() int {
	fake.credentialReportedMutex.RLock()
	defer fake.credentialReportedMutex.RUnlock()
	return len(fake.credentialReportedArgsForCall)
}

func (fake *FakeCredentialRepository) CredentialReportedArgsForCall(i int) *db.Credential {
	fake.credentialReportedMutex.RLock()
	defer fake.credentialReportedMutex.RUnlock()
	return fake.credentialReportedArgsForCall[i].cred
}

func (fake *FakeCredentialRepository) CredentialReportedReturns(result1 bool, result2 error) {
	fake.CredentialReportedStub = nil
	fake.credentialReportedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) CredentialReportedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.CredentialReportedStub = nil
	if fake.credentialReportedReturnsOnCall == nil {
		fake.credentialReportedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.credentialReportedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.forScanWithIDMutex.RLock()
	defer fake.forScanWithIDMutex.RUnlock()
	fake.uniqueSHAsForRepoAndRulesVersionMutex.RLock()
	defer fake.uniqueSHAsForRepoAndRulesVersionMutex.RUnlock()
	fake.credentialReportedMutex.RLock()
	defer fake.credentialReportedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentialRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.CredentialRepository = new(FakeCredentialRepository)
