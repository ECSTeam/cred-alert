// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"cred-alert/db"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeScanRepository struct {
	StartStub        func(lager.Logger, string, string, string, string, *db.Repository) db.ActiveScan
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 *db.Repository
	}
	startReturns struct {
		result1 db.ActiveScan
	}
	startReturnsOnCall map[int]struct {
		result1 db.ActiveScan
	}
	ScansNotYetRunWithVersionStub        func(lager.Logger, int) ([]db.PriorScan, error)
	scansNotYetRunWithVersionMutex       sync.RWMutex
	scansNotYetRunWithVersionArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
	}
	scansNotYetRunWithVersionReturns struct {
		result1 []db.PriorScan
		result2 error
	}
	scansNotYetRunWithVersionReturnsOnCall map[int]struct {
		result1 []db.PriorScan
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScanRepository) Start(arg1 lager.Logger, arg2 string, arg3 string, arg4 string, arg5 string, arg6 *db.Repository) db.ActiveScan {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 *db.Repository
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("Start", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.startReturns.result1
}

func (fake *FakeScanRepository) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeScanRepository) StartArgsForCall(i int) (lager.Logger, string, string, string, string, *db.Repository) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].arg1, fake.startArgsForCall[i].arg2, fake.startArgsForCall[i].arg3, fake.startArgsForCall[i].arg4, fake.startArgsForCall[i].arg5, fake.startArgsForCall[i].arg6
}

func (fake *FakeScanRepository) StartReturns(result1 db.ActiveScan) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 db.ActiveScan
	}{result1}
}

func (fake *FakeScanRepository) StartReturnsOnCall(i int, result1 db.ActiveScan) {
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 db.ActiveScan
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 db.ActiveScan
	}{result1}
}

func (fake *FakeScanRepository) ScansNotYetRunWithVersion(arg1 lager.Logger, arg2 int) ([]db.PriorScan, error) {
	fake.scansNotYetRunWithVersionMutex.Lock()
	ret, specificReturn := fake.scansNotYetRunWithVersionReturnsOnCall[len(fake.scansNotYetRunWithVersionArgsForCall)]
	fake.scansNotYetRunWithVersionArgsForCall = append(fake.scansNotYetRunWithVersionArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("ScansNotYetRunWithVersion", []interface{}{arg1, arg2})
	fake.scansNotYetRunWithVersionMutex.Unlock()
	if fake.ScansNotYetRunWithVersionStub != nil {
		return fake.ScansNotYetRunWithVersionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.scansNotYetRunWithVersionReturns.result1, fake.scansNotYetRunWithVersionReturns.result2
}

func (fake *FakeScanRepository) ScansNotYetRunWithVersionCallCount() int {
	fake.scansNotYetRunWithVersionMutex.RLock()
	defer fake.scansNotYetRunWithVersionMutex.RUnlock()
	return len(fake.scansNotYetRunWithVersionArgsForCall)
}

func (fake *FakeScanRepository) ScansNotYetRunWithVersionArgsForCall(i int) (lager.Logger, int) {
	fake.scansNotYetRunWithVersionMutex.RLock()
	defer fake.scansNotYetRunWithVersionMutex.RUnlock()
	return fake.scansNotYetRunWithVersionArgsForCall[i].arg1, fake.scansNotYetRunWithVersionArgsForCall[i].arg2
}

func (fake *FakeScanRepository) ScansNotYetRunWithVersionReturns(result1 []db.PriorScan, result2 error) {
	fake.ScansNotYetRunWithVersionStub = nil
	fake.scansNotYetRunWithVersionReturns = struct {
		result1 []db.PriorScan
		result2 error
	}{result1, result2}
}

func (fake *FakeScanRepository) ScansNotYetRunWithVersionReturnsOnCall(i int, result1 []db.PriorScan, result2 error) {
	fake.ScansNotYetRunWithVersionStub = nil
	if fake.scansNotYetRunWithVersionReturnsOnCall == nil {
		fake.scansNotYetRunWithVersionReturnsOnCall = make(map[int]struct {
			result1 []db.PriorScan
			result2 error
		})
	}
	fake.scansNotYetRunWithVersionReturnsOnCall[i] = struct {
		result1 []db.PriorScan
		result2 error
	}{result1, result2}
}

func (fake *FakeScanRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.scansNotYetRunWithVersionMutex.RLock()
	defer fake.scansNotYetRunWithVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScanRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ScanRepository = new(FakeScanRepository)
