// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"
)

type FakeActiveScan struct {
	RecordCredentialStub        func(db.Credential)
	recordCredentialMutex       sync.RWMutex
	recordCredentialArgsForCall []struct {
		arg1 db.Credential
	}
	FinishStub        func() error
	finishMutex       sync.RWMutex
	finishArgsForCall []struct{}
	finishReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeActiveScan) RecordCredential(arg1 db.Credential) {
	fake.recordCredentialMutex.Lock()
	fake.recordCredentialArgsForCall = append(fake.recordCredentialArgsForCall, struct {
		arg1 db.Credential
	}{arg1})
	fake.recordInvocation("RecordCredential", []interface{}{arg1})
	fake.recordCredentialMutex.Unlock()
	if fake.RecordCredentialStub != nil {
		fake.RecordCredentialStub(arg1)
	}
}

func (fake *FakeActiveScan) RecordCredentialCallCount() int {
	fake.recordCredentialMutex.RLock()
	defer fake.recordCredentialMutex.RUnlock()
	return len(fake.recordCredentialArgsForCall)
}

func (fake *FakeActiveScan) RecordCredentialArgsForCall(i int) db.Credential {
	fake.recordCredentialMutex.RLock()
	defer fake.recordCredentialMutex.RUnlock()
	return fake.recordCredentialArgsForCall[i].arg1
}

func (fake *FakeActiveScan) Finish() error {
	fake.finishMutex.Lock()
	fake.finishArgsForCall = append(fake.finishArgsForCall, struct{}{})
	fake.recordInvocation("Finish", []interface{}{})
	fake.finishMutex.Unlock()
	if fake.FinishStub != nil {
		return fake.FinishStub()
	} else {
		return fake.finishReturns.result1
	}
}

func (fake *FakeActiveScan) FinishCallCount() int {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return len(fake.finishArgsForCall)
}

func (fake *FakeActiveScan) FinishReturns(result1 error) {
	fake.FinishStub = nil
	fake.finishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeActiveScan) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.recordCredentialMutex.RLock()
	defer fake.recordCredentialMutex.RUnlock()
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeActiveScan) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ActiveScan = new(FakeActiveScan)
