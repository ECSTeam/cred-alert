// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeFailedMessageRepository struct {
	GetFailedMessagesStub        func(lager.Logger) ([]db.FailedMessage, error)
	getFailedMessagesMutex       sync.RWMutex
	getFailedMessagesArgsForCall []struct {
		arg1 lager.Logger
	}
	getFailedMessagesReturns struct {
		result1 []db.FailedMessage
		result2 error
	}
	GetDeadLettersStub        func(lager.Logger) ([]db.FailedMessage, error)
	getDeadLettersMutex       sync.RWMutex
	getDeadLettersArgsForCall []struct {
		arg1 lager.Logger
	}
	getDeadLettersReturns struct {
		result1 []db.FailedMessage
		result2 error
	}
	RegisterFailedMessageStub        func(lager.Logger, string) (int, error)
	registerFailedMessageMutex       sync.RWMutex
	registerFailedMessageArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	registerFailedMessageReturns struct {
		result1 int
		result2 error
	}
	MarkFailedMessageAsDeadStub        func(lager.Logger, string) error
	markFailedMessageAsDeadMutex       sync.RWMutex
	markFailedMessageAsDeadArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	markFailedMessageAsDeadReturns struct {
		result1 error
	}
	RemoveFailedMessageStub        func(lager.Logger, string) error
	removeFailedMessageMutex       sync.RWMutex
	removeFailedMessageArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	removeFailedMessageReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFailedMessageRepository) GetFailedMessages(arg1 lager.Logger) ([]db.FailedMessage, error) {
	fake.getFailedMessagesMutex.Lock()
	fake.getFailedMessagesArgsForCall = append(fake.getFailedMessagesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("GetFailedMessages", []interface{}{arg1})
	fake.getFailedMessagesMutex.Unlock()
	if fake.GetFailedMessagesStub != nil {
		return fake.GetFailedMessagesStub(arg1)
	} else {
		return fake.getFailedMessagesReturns.result1, fake.getFailedMessagesReturns.result2
	}
}

func (fake *FakeFailedMessageRepository) GetFailedMessagesCallCount() int {
	fake.getFailedMessagesMutex.RLock()
	defer fake.getFailedMessagesMutex.RUnlock()
	return len(fake.getFailedMessagesArgsForCall)
}

func (fake *FakeFailedMessageRepository) GetFailedMessagesArgsForCall(i int) lager.Logger {
	fake.getFailedMessagesMutex.RLock()
	defer fake.getFailedMessagesMutex.RUnlock()
	return fake.getFailedMessagesArgsForCall[i].arg1
}

func (fake *FakeFailedMessageRepository) GetFailedMessagesReturns(result1 []db.FailedMessage, result2 error) {
	fake.GetFailedMessagesStub = nil
	fake.getFailedMessagesReturns = struct {
		result1 []db.FailedMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeFailedMessageRepository) GetDeadLetters(arg1 lager.Logger) ([]db.FailedMessage, error) {
	fake.getDeadLettersMutex.Lock()
	fake.getDeadLettersArgsForCall = append(fake.getDeadLettersArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("GetDeadLetters", []interface{}{arg1})
	fake.getDeadLettersMutex.Unlock()
	if fake.GetDeadLettersStub != nil {
		return fake.GetDeadLettersStub(arg1)
	} else {
		return fake.getDeadLettersReturns.result1, fake.getDeadLettersReturns.result2
	}
}

func (fake *FakeFailedMessageRepository) GetDeadLettersCallCount() int {
	fake.getDeadLettersMutex.RLock()
	defer fake.getDeadLettersMutex.RUnlock()
	return len(fake.getDeadLettersArgsForCall)
}

func (fake *FakeFailedMessageRepository) GetDeadLettersArgsForCall(i int) lager.Logger {
	fake.getDeadLettersMutex.RLock()
	defer fake.getDeadLettersMutex.RUnlock()
	return fake.getDeadLettersArgsForCall[i].arg1
}

func (fake *FakeFailedMessageRepository) GetDeadLettersReturns(result1 []db.FailedMessage, result2 error) {
	fake.GetDeadLettersStub = nil
	fake.getDeadLettersReturns = struct {
		result1 []db.FailedMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeFailedMessageRepository) RegisterFailedMessage(arg1 lager.Logger, arg2 string) (int, error) {
	fake.registerFailedMessageMutex.Lock()
	fake.registerFailedMessageArgsForCall = append(fake.registerFailedMessageArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RegisterFailedMessage", []interface{}{arg1, arg2})
	fake.registerFailedMessageMutex.Unlock()
	if fake.RegisterFailedMessageStub != nil {
		return fake.RegisterFailedMessageStub(arg1, arg2)
	} else {
		return fake.registerFailedMessageReturns.result1, fake.registerFailedMessageReturns.result2
	}
}

func (fake *FakeFailedMessageRepository) RegisterFailedMessageCallCount() int {
	fake.registerFailedMessageMutex.RLock()
	defer fake.registerFailedMessageMutex.RUnlock()
	return len(fake.registerFailedMessageArgsForCall)
}

func (fake *FakeFailedMessageRepository) RegisterFailedMessageArgsForCall(i int) (lager.Logger, string) {
	fake.registerFailedMessageMutex.RLock()
	defer fake.registerFailedMessageMutex.RUnlock()
	return fake.registerFailedMessageArgsForCall[i].arg1, fake.registerFailedMessageArgsForCall[i].arg2
}

func (fake *FakeFailedMessageRepository) RegisterFailedMessageReturns(result1 int, result2 error) {
	fake.RegisterFailedMessageStub = nil
	fake.registerFailedMessageReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeFailedMessageRepository) MarkFailedMessageAsDead(arg1 lager.Logger, arg2 string) error {
	fake.markFailedMessageAsDeadMutex.Lock()
	fake.markFailedMessageAsDeadArgsForCall = append(fake.markFailedMessageAsDeadArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("MarkFailedMessageAsDead", []interface{}{arg1, arg2})
	fake.markFailedMessageAsDeadMutex.Unlock()
	if fake.MarkFailedMessageAsDeadStub != nil {
		return fake.MarkFailedMessageAsDeadStub(arg1, arg2)
	} else {
		return fake.markFailedMessageAsDeadReturns.result1
	}
}

func (fake *FakeFailedMessageRepository) MarkFailedMessageAsDeadCallCount() int {
	fake.markFailedMessageAsDeadMutex.RLock()
	defer fake.markFailedMessageAsDeadMutex.RUnlock()
	return len(fake.markFailedMessageAsDeadArgsForCall)
}

func (fake *FakeFailedMessageRepository) MarkFailedMessageAsDeadArgsForCall(i int) (lager.Logger, string) {
	fake.markFailedMessageAsDeadMutex.RLock()
	defer fake.markFailedMessageAsDeadMutex.RUnlock()
	return fake.markFailedMessageAsDeadArgsForCall[i].arg1, fake.markFailedMessageAsDeadArgsForCall[i].arg2
}

func (fake *FakeFailedMessageRepository) MarkFailedMessageAsDeadReturns(result1 error) {
	fake.MarkFailedMessageAsDeadStub = nil
	fake.markFailedMessageAsDeadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFailedMessageRepository) RemoveFailedMessage(arg1 lager.Logger, arg2 string) error {
	fake.removeFailedMessageMutex.Lock()
	fake.removeFailedMessageArgsForCall = append(fake.removeFailedMessageArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveFailedMessage", []interface{}{arg1, arg2})
	fake.removeFailedMessageMutex.Unlock()
	if fake.RemoveFailedMessageStub != nil {
		return fake.RemoveFailedMessageStub(arg1, arg2)
	} else {
		return fake.removeFailedMessageReturns.result1
	}
}

func (fake *FakeFailedMessageRepository) RemoveFailedMessageCallCount() int {
	fake.removeFailedMessageMutex.RLock()
	defer fake.removeFailedMessageMutex.RUnlock()
	return len(fake.removeFailedMessageArgsForCall)
}

func (fake *FakeFailedMessageRepository) RemoveFailedMessageArgsForCall(i int) (lager.Logger, string) {
	fake.removeFailedMessageMutex.RLock()
	defer fake.removeFailedMessageMutex.RUnlock()
	return fake.removeFailedMessageArgsForCall[i].arg1, fake.removeFailedMessageArgsForCall[i].arg2
}

func (fake *FakeFailedMessageRepository) RemoveFailedMessageReturns(result1 error) {
	fake.RemoveFailedMessageStub = nil
	fake.removeFailedMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFailedMessageRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFailedMessagesMutex.RLock()
	defer fake.getFailedMessagesMutex.RUnlock()
	fake.getDeadLettersMutex.RLock()
	defer fake.getDeadLettersMutex.RUnlock()
	fake.registerFailedMessageMutex.RLock()
	defer fake.registerFailedMessageMutex.RUnlock()
	fake.markFailedMessageAsDeadMutex.RLock()
	defer fake.markFailedMessageAsDeadMutex.RUnlock()
	fake.removeFailedMessageMutex.RLock()
	defer fake.removeFailedMessageMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFailedMessageRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.FailedMessageRepository = new(FakeFailedMessageRepository)
