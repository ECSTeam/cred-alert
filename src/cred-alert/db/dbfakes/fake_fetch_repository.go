// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeFetchRepository struct {
	RegisterFetchStub        func(lager.Logger, *db.Fetch) error
	registerFetchMutex       sync.RWMutex
	registerFetchArgsForCall []struct {
		arg1 lager.Logger
		arg2 *db.Fetch
	}
	registerFetchReturns struct {
		result1 error
	}
	registerFetchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetchRepository) RegisterFetch(arg1 lager.Logger, arg2 *db.Fetch) error {
	fake.registerFetchMutex.Lock()
	ret, specificReturn := fake.registerFetchReturnsOnCall[len(fake.registerFetchArgsForCall)]
	fake.registerFetchArgsForCall = append(fake.registerFetchArgsForCall, struct {
		arg1 lager.Logger
		arg2 *db.Fetch
	}{arg1, arg2})
	fake.recordInvocation("RegisterFetch", []interface{}{arg1, arg2})
	fake.registerFetchMutex.Unlock()
	if fake.RegisterFetchStub != nil {
		return fake.RegisterFetchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.registerFetchReturns.result1
}

func (fake *FakeFetchRepository) RegisterFetchCallCount() int {
	fake.registerFetchMutex.RLock()
	defer fake.registerFetchMutex.RUnlock()
	return len(fake.registerFetchArgsForCall)
}

func (fake *FakeFetchRepository) RegisterFetchArgsForCall(i int) (lager.Logger, *db.Fetch) {
	fake.registerFetchMutex.RLock()
	defer fake.registerFetchMutex.RUnlock()
	return fake.registerFetchArgsForCall[i].arg1, fake.registerFetchArgsForCall[i].arg2
}

func (fake *FakeFetchRepository) RegisterFetchReturns(result1 error) {
	fake.RegisterFetchStub = nil
	fake.registerFetchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFetchRepository) RegisterFetchReturnsOnCall(i int, result1 error) {
	fake.RegisterFetchStub = nil
	if fake.registerFetchReturnsOnCall == nil {
		fake.registerFetchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerFetchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFetchRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerFetchMutex.RLock()
	defer fake.registerFetchMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFetchRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.FetchRepository = new(FakeFetchRepository)
