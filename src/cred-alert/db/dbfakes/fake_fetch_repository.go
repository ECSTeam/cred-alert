// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeFetchRepository struct {
	SaveFetchStub        func(lager.Logger, *db.Fetch) error
	saveFetchMutex       sync.RWMutex
	saveFetchArgsForCall []struct {
		arg1 lager.Logger
		arg2 *db.Fetch
	}
	saveFetchReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetchRepository) SaveFetch(arg1 lager.Logger, arg2 *db.Fetch) error {
	fake.saveFetchMutex.Lock()
	fake.saveFetchArgsForCall = append(fake.saveFetchArgsForCall, struct {
		arg1 lager.Logger
		arg2 *db.Fetch
	}{arg1, arg2})
	fake.recordInvocation("SaveFetch", []interface{}{arg1, arg2})
	fake.saveFetchMutex.Unlock()
	if fake.SaveFetchStub != nil {
		return fake.SaveFetchStub(arg1, arg2)
	} else {
		return fake.saveFetchReturns.result1
	}
}

func (fake *FakeFetchRepository) SaveFetchCallCount() int {
	fake.saveFetchMutex.RLock()
	defer fake.saveFetchMutex.RUnlock()
	return len(fake.saveFetchArgsForCall)
}

func (fake *FakeFetchRepository) SaveFetchArgsForCall(i int) (lager.Logger, *db.Fetch) {
	fake.saveFetchMutex.RLock()
	defer fake.saveFetchMutex.RUnlock()
	return fake.saveFetchArgsForCall[i].arg1, fake.saveFetchArgsForCall[i].arg2
}

func (fake *FakeFetchRepository) SaveFetchReturns(result1 error) {
	fake.SaveFetchStub = nil
	fake.saveFetchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFetchRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveFetchMutex.RLock()
	defer fake.saveFetchMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFetchRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.FetchRepository = new(FakeFetchRepository)
