// This file was generated by counterfeiter
package dbfakes

import (
	"cred-alert/db"
	"sync"

	"github.com/pivotal-golang/lager"
)

type FakeDiffScanRepository struct {
	SaveDiffScanStub        func(lager.Logger, *db.DiffScan) error
	saveDiffScanMutex       sync.RWMutex
	saveDiffScanArgsForCall []struct {
		arg1 lager.Logger
		arg2 *db.DiffScan
	}
	saveDiffScanReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiffScanRepository) SaveDiffScan(arg1 lager.Logger, arg2 *db.DiffScan) error {
	fake.saveDiffScanMutex.Lock()
	fake.saveDiffScanArgsForCall = append(fake.saveDiffScanArgsForCall, struct {
		arg1 lager.Logger
		arg2 *db.DiffScan
	}{arg1, arg2})
	fake.recordInvocation("SaveDiffScan", []interface{}{arg1, arg2})
	fake.saveDiffScanMutex.Unlock()
	if fake.SaveDiffScanStub != nil {
		return fake.SaveDiffScanStub(arg1, arg2)
	} else {
		return fake.saveDiffScanReturns.result1
	}
}

func (fake *FakeDiffScanRepository) SaveDiffScanCallCount() int {
	fake.saveDiffScanMutex.RLock()
	defer fake.saveDiffScanMutex.RUnlock()
	return len(fake.saveDiffScanArgsForCall)
}

func (fake *FakeDiffScanRepository) SaveDiffScanArgsForCall(i int) (lager.Logger, *db.DiffScan) {
	fake.saveDiffScanMutex.RLock()
	defer fake.saveDiffScanMutex.RUnlock()
	return fake.saveDiffScanArgsForCall[i].arg1, fake.saveDiffScanArgsForCall[i].arg2
}

func (fake *FakeDiffScanRepository) SaveDiffScanReturns(result1 error) {
	fake.SaveDiffScanStub = nil
	fake.saveDiffScanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiffScanRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveDiffScanMutex.RLock()
	defer fake.saveDiffScanMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiffScanRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DiffScanRepository = new(FakeDiffScanRepository)
