// This file was generated by counterfeiter
package mimetypefakes

import (
	"cred-alert/mimetype"
	"sync"
)

type FakeDecoder struct {
	TypeByBufferStub        func([]byte) (string, error)
	typeByBufferMutex       sync.RWMutex
	typeByBufferArgsForCall []struct {
		arg1 []byte
	}
	typeByBufferReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDecoder) TypeByBuffer(arg1 []byte) (string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.typeByBufferMutex.Lock()
	fake.typeByBufferArgsForCall = append(fake.typeByBufferArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("TypeByBuffer", []interface{}{arg1Copy})
	fake.typeByBufferMutex.Unlock()
	if fake.TypeByBufferStub != nil {
		return fake.TypeByBufferStub(arg1)
	} else {
		return fake.typeByBufferReturns.result1, fake.typeByBufferReturns.result2
	}
}

func (fake *FakeDecoder) TypeByBufferCallCount() int {
	fake.typeByBufferMutex.RLock()
	defer fake.typeByBufferMutex.RUnlock()
	return len(fake.typeByBufferArgsForCall)
}

func (fake *FakeDecoder) TypeByBufferArgsForCall(i int) []byte {
	fake.typeByBufferMutex.RLock()
	defer fake.typeByBufferMutex.RUnlock()
	return fake.typeByBufferArgsForCall[i].arg1
}

func (fake *FakeDecoder) TypeByBufferReturns(result1 string, result2 error) {
	fake.TypeByBufferStub = nil
	fake.typeByBufferReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDecoder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.typeByBufferMutex.RLock()
	defer fake.typeByBufferMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDecoder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mimetype.Decoder = new(FakeDecoder)
