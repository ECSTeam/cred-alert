// This file was generated by counterfeiter
package githubclientfakes

import (
	"cred-alert/githubclient"
	"net/url"
	"sync"

	"github.com/pivotal-golang/lager"
)

type FakeClient struct {
	CompareRefsStub        func(logger lager.Logger, owner, repo, base, head string) (string, error)
	compareRefsMutex       sync.RWMutex
	compareRefsArgsForCall []struct {
		logger lager.Logger
		owner  string
		repo   string
		base   string
		head   string
	}
	compareRefsReturns struct {
		result1 string
		result2 error
	}
	ArchiveLinkStub        func(owner, repo, ref string) (*url.URL, error)
	archiveLinkMutex       sync.RWMutex
	archiveLinkArgsForCall []struct {
		owner string
		repo  string
		ref   string
	}
	archiveLinkReturns struct {
		result1 *url.URL
		result2 error
	}
	CommitInfoStub        func(logger lager.Logger, owner, repo, sha string) (githubclient.CommitInfo, error)
	commitInfoMutex       sync.RWMutex
	commitInfoArgsForCall []struct {
		logger lager.Logger
		owner  string
		repo   string
		sha    string
	}
	commitInfoReturns struct {
		result1 githubclient.CommitInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CompareRefs(logger lager.Logger, owner string, repo string, base string, head string) (string, error) {
	fake.compareRefsMutex.Lock()
	fake.compareRefsArgsForCall = append(fake.compareRefsArgsForCall, struct {
		logger lager.Logger
		owner  string
		repo   string
		base   string
		head   string
	}{logger, owner, repo, base, head})
	fake.recordInvocation("CompareRefs", []interface{}{logger, owner, repo, base, head})
	fake.compareRefsMutex.Unlock()
	if fake.CompareRefsStub != nil {
		return fake.CompareRefsStub(logger, owner, repo, base, head)
	} else {
		return fake.compareRefsReturns.result1, fake.compareRefsReturns.result2
	}
}

func (fake *FakeClient) CompareRefsCallCount() int {
	fake.compareRefsMutex.RLock()
	defer fake.compareRefsMutex.RUnlock()
	return len(fake.compareRefsArgsForCall)
}

func (fake *FakeClient) CompareRefsArgsForCall(i int) (lager.Logger, string, string, string, string) {
	fake.compareRefsMutex.RLock()
	defer fake.compareRefsMutex.RUnlock()
	return fake.compareRefsArgsForCall[i].logger, fake.compareRefsArgsForCall[i].owner, fake.compareRefsArgsForCall[i].repo, fake.compareRefsArgsForCall[i].base, fake.compareRefsArgsForCall[i].head
}

func (fake *FakeClient) CompareRefsReturns(result1 string, result2 error) {
	fake.CompareRefsStub = nil
	fake.compareRefsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ArchiveLink(owner string, repo string, ref string) (*url.URL, error) {
	fake.archiveLinkMutex.Lock()
	fake.archiveLinkArgsForCall = append(fake.archiveLinkArgsForCall, struct {
		owner string
		repo  string
		ref   string
	}{owner, repo, ref})
	fake.recordInvocation("ArchiveLink", []interface{}{owner, repo, ref})
	fake.archiveLinkMutex.Unlock()
	if fake.ArchiveLinkStub != nil {
		return fake.ArchiveLinkStub(owner, repo, ref)
	} else {
		return fake.archiveLinkReturns.result1, fake.archiveLinkReturns.result2
	}
}

func (fake *FakeClient) ArchiveLinkCallCount() int {
	fake.archiveLinkMutex.RLock()
	defer fake.archiveLinkMutex.RUnlock()
	return len(fake.archiveLinkArgsForCall)
}

func (fake *FakeClient) ArchiveLinkArgsForCall(i int) (string, string, string) {
	fake.archiveLinkMutex.RLock()
	defer fake.archiveLinkMutex.RUnlock()
	return fake.archiveLinkArgsForCall[i].owner, fake.archiveLinkArgsForCall[i].repo, fake.archiveLinkArgsForCall[i].ref
}

func (fake *FakeClient) ArchiveLinkReturns(result1 *url.URL, result2 error) {
	fake.ArchiveLinkStub = nil
	fake.archiveLinkReturns = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CommitInfo(logger lager.Logger, owner string, repo string, sha string) (githubclient.CommitInfo, error) {
	fake.commitInfoMutex.Lock()
	fake.commitInfoArgsForCall = append(fake.commitInfoArgsForCall, struct {
		logger lager.Logger
		owner  string
		repo   string
		sha    string
	}{logger, owner, repo, sha})
	fake.recordInvocation("CommitInfo", []interface{}{logger, owner, repo, sha})
	fake.commitInfoMutex.Unlock()
	if fake.CommitInfoStub != nil {
		return fake.CommitInfoStub(logger, owner, repo, sha)
	} else {
		return fake.commitInfoReturns.result1, fake.commitInfoReturns.result2
	}
}

func (fake *FakeClient) CommitInfoCallCount() int {
	fake.commitInfoMutex.RLock()
	defer fake.commitInfoMutex.RUnlock()
	return len(fake.commitInfoArgsForCall)
}

func (fake *FakeClient) CommitInfoArgsForCall(i int) (lager.Logger, string, string, string) {
	fake.commitInfoMutex.RLock()
	defer fake.commitInfoMutex.RUnlock()
	return fake.commitInfoArgsForCall[i].logger, fake.commitInfoArgsForCall[i].owner, fake.commitInfoArgsForCall[i].repo, fake.commitInfoArgsForCall[i].sha
}

func (fake *FakeClient) CommitInfoReturns(result1 githubclient.CommitInfo, result2 error) {
	fake.CommitInfoStub = nil
	fake.commitInfoReturns = struct {
		result1 githubclient.CommitInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compareRefsMutex.RLock()
	defer fake.compareRefsMutex.RUnlock()
	fake.archiveLinkMutex.RLock()
	defer fake.archiveLinkMutex.RUnlock()
	fake.commitInfoMutex.RLock()
	defer fake.commitInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ githubclient.Client = new(FakeClient)
