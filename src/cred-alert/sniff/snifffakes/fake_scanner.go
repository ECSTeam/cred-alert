// Code generated by counterfeiter. DO NOT EDIT.
package snifffakes

import (
	"cred-alert/scanners"
	"cred-alert/sniff"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeScanner struct {
	ScanStub        func(lager.Logger) bool
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 lager.Logger
	}
	scanReturns struct {
		result1 bool
	}
	scanReturnsOnCall map[int]struct {
		result1 bool
	}
	LineStub        func(lager.Logger) *scanners.Line
	lineMutex       sync.RWMutex
	lineArgsForCall []struct {
		arg1 lager.Logger
	}
	lineReturns struct {
		result1 *scanners.Line
	}
	lineReturnsOnCall map[int]struct {
		result1 *scanners.Line
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScanner) Scan(arg1 lager.Logger) bool {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("Scan", []interface{}{arg1})
	fake.scanMutex.Unlock()
	if fake.ScanStub != nil {
		return fake.ScanStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.scanReturns.result1
}

func (fake *FakeScanner) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeScanner) ScanArgsForCall(i int) lager.Logger {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return fake.scanArgsForCall[i].arg1
}

func (fake *FakeScanner) ScanReturns(result1 bool) {
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeScanner) ScanReturnsOnCall(i int, result1 bool) {
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeScanner) Line(arg1 lager.Logger) *scanners.Line {
	fake.lineMutex.Lock()
	ret, specificReturn := fake.lineReturnsOnCall[len(fake.lineArgsForCall)]
	fake.lineArgsForCall = append(fake.lineArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("Line", []interface{}{arg1})
	fake.lineMutex.Unlock()
	if fake.LineStub != nil {
		return fake.LineStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.lineReturns.result1
}

func (fake *FakeScanner) LineCallCount() int {
	fake.lineMutex.RLock()
	defer fake.lineMutex.RUnlock()
	return len(fake.lineArgsForCall)
}

func (fake *FakeScanner) LineArgsForCall(i int) lager.Logger {
	fake.lineMutex.RLock()
	defer fake.lineMutex.RUnlock()
	return fake.lineArgsForCall[i].arg1
}

func (fake *FakeScanner) LineReturns(result1 *scanners.Line) {
	fake.LineStub = nil
	fake.lineReturns = struct {
		result1 *scanners.Line
	}{result1}
}

func (fake *FakeScanner) LineReturnsOnCall(i int, result1 *scanners.Line) {
	fake.LineStub = nil
	if fake.lineReturnsOnCall == nil {
		fake.lineReturnsOnCall = make(map[int]struct {
			result1 *scanners.Line
		})
	}
	fake.lineReturnsOnCall[i] = struct {
		result1 *scanners.Line
	}{result1}
}

func (fake *FakeScanner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	fake.lineMutex.RLock()
	defer fake.lineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScanner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sniff.Scanner = new(FakeScanner)
