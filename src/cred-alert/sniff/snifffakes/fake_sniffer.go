// This file was generated by counterfeiter
package snifffakes

import (
	"cred-alert/sniff"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeSniffer struct {
	SniffStub        func(lager.Logger, sniff.Scanner, sniff.ViolationHandlerFunc) error
	sniffMutex       sync.RWMutex
	sniffArgsForCall []struct {
		arg1 lager.Logger
		arg2 sniff.Scanner
		arg3 sniff.ViolationHandlerFunc
	}
	sniffReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSniffer) Sniff(arg1 lager.Logger, arg2 sniff.Scanner, arg3 sniff.ViolationHandlerFunc) error {
	fake.sniffMutex.Lock()
	fake.sniffArgsForCall = append(fake.sniffArgsForCall, struct {
		arg1 lager.Logger
		arg2 sniff.Scanner
		arg3 sniff.ViolationHandlerFunc
	}{arg1, arg2, arg3})
	fake.recordInvocation("Sniff", []interface{}{arg1, arg2, arg3})
	fake.sniffMutex.Unlock()
	if fake.SniffStub != nil {
		return fake.SniffStub(arg1, arg2, arg3)
	}
	return fake.sniffReturns.result1
}

func (fake *FakeSniffer) SniffCallCount() int {
	fake.sniffMutex.RLock()
	defer fake.sniffMutex.RUnlock()
	return len(fake.sniffArgsForCall)
}

func (fake *FakeSniffer) SniffArgsForCall(i int) (lager.Logger, sniff.Scanner, sniff.ViolationHandlerFunc) {
	fake.sniffMutex.RLock()
	defer fake.sniffMutex.RUnlock()
	return fake.sniffArgsForCall[i].arg1, fake.sniffArgsForCall[i].arg2, fake.sniffArgsForCall[i].arg3
}

func (fake *FakeSniffer) SniffReturns(result1 error) {
	fake.SniffStub = nil
	fake.sniffReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSniffer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sniffMutex.RLock()
	defer fake.sniffMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSniffer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sniff.Sniffer = new(FakeSniffer)
