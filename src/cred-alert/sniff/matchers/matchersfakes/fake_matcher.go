// This file was generated by counterfeiter
package matchersfakes

import (
	"cred-alert/scanners"
	"cred-alert/sniff/matchers"
	"sync"
)

type FakeMatcher struct {
	MatchStub        func(*scanners.Line) (bool, int, int)
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 *scanners.Line
	}
	matchReturns struct {
		result1 bool
		result2 int
		result3 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMatcher) Match(arg1 *scanners.Line) (bool, int, int) {
	fake.matchMutex.Lock()
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 *scanners.Line
	}{arg1})
	fake.recordInvocation("Match", []interface{}{arg1})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(arg1)
	} else {
		return fake.matchReturns.result1, fake.matchReturns.result2, fake.matchReturns.result3
	}
}

func (fake *FakeMatcher) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeMatcher) MatchArgsForCall(i int) *scanners.Line {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return fake.matchArgsForCall[i].arg1
}

func (fake *FakeMatcher) MatchReturns(result1 bool, result2 int, result3 int) {
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 bool
		result2 int
		result3 int
	}{result1, result2, result3}
}

func (fake *FakeMatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ matchers.Matcher = new(FakeMatcher)
