// Code generated by counterfeiter. DO NOT EDIT.
package gitclientfakes

import (
	"cred-alert/gitclient"
	"sync"
)

type FakeFileLookup struct {
	FileContentsStub        func(repoPath string, branch string, filePath string) ([]byte, error)
	fileContentsMutex       sync.RWMutex
	fileContentsArgsForCall []struct {
		repoPath string
		branch   string
		filePath string
	}
	fileContentsReturns struct {
		result1 []byte
		result2 error
	}
	fileContentsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileLookup) FileContents(repoPath string, branch string, filePath string) ([]byte, error) {
	fake.fileContentsMutex.Lock()
	ret, specificReturn := fake.fileContentsReturnsOnCall[len(fake.fileContentsArgsForCall)]
	fake.fileContentsArgsForCall = append(fake.fileContentsArgsForCall, struct {
		repoPath string
		branch   string
		filePath string
	}{repoPath, branch, filePath})
	fake.recordInvocation("FileContents", []interface{}{repoPath, branch, filePath})
	fake.fileContentsMutex.Unlock()
	if fake.FileContentsStub != nil {
		return fake.FileContentsStub(repoPath, branch, filePath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fileContentsReturns.result1, fake.fileContentsReturns.result2
}

func (fake *FakeFileLookup) FileContentsCallCount() int {
	fake.fileContentsMutex.RLock()
	defer fake.fileContentsMutex.RUnlock()
	return len(fake.fileContentsArgsForCall)
}

func (fake *FakeFileLookup) FileContentsArgsForCall(i int) (string, string, string) {
	fake.fileContentsMutex.RLock()
	defer fake.fileContentsMutex.RUnlock()
	return fake.fileContentsArgsForCall[i].repoPath, fake.fileContentsArgsForCall[i].branch, fake.fileContentsArgsForCall[i].filePath
}

func (fake *FakeFileLookup) FileContentsReturns(result1 []byte, result2 error) {
	fake.FileContentsStub = nil
	fake.fileContentsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFileLookup) FileContentsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.FileContentsStub = nil
	if fake.fileContentsReturnsOnCall == nil {
		fake.fileContentsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.fileContentsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFileLookup) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fileContentsMutex.RLock()
	defer fake.fileContentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileLookup) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitclient.FileLookup = new(FakeFileLookup)
