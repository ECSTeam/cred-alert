// This file was generated by counterfeiter
package gitclientfakes

import (
	"cred-alert/gitclient"
	"sync"
)

type FakeLooper struct {
	ScanCurrentStateStub        func(repositoryPath string, callback gitclient.ScanCallback) error
	scanCurrentStateMutex       sync.RWMutex
	scanCurrentStateArgsForCall []struct {
		repositoryPath string
		callback       gitclient.ScanCallback
	}
	scanCurrentStateReturns struct {
		result1 error
	}
	scanCurrentStateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLooper) ScanCurrentState(repositoryPath string, callback gitclient.ScanCallback) error {
	fake.scanCurrentStateMutex.Lock()
	ret, specificReturn := fake.scanCurrentStateReturnsOnCall[len(fake.scanCurrentStateArgsForCall)]
	fake.scanCurrentStateArgsForCall = append(fake.scanCurrentStateArgsForCall, struct {
		repositoryPath string
		callback       gitclient.ScanCallback
	}{repositoryPath, callback})
	fake.recordInvocation("ScanCurrentState", []interface{}{repositoryPath, callback})
	fake.scanCurrentStateMutex.Unlock()
	if fake.ScanCurrentStateStub != nil {
		return fake.ScanCurrentStateStub(repositoryPath, callback)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.scanCurrentStateReturns.result1
}

func (fake *FakeLooper) ScanCurrentStateCallCount() int {
	fake.scanCurrentStateMutex.RLock()
	defer fake.scanCurrentStateMutex.RUnlock()
	return len(fake.scanCurrentStateArgsForCall)
}

func (fake *FakeLooper) ScanCurrentStateArgsForCall(i int) (string, gitclient.ScanCallback) {
	fake.scanCurrentStateMutex.RLock()
	defer fake.scanCurrentStateMutex.RUnlock()
	return fake.scanCurrentStateArgsForCall[i].repositoryPath, fake.scanCurrentStateArgsForCall[i].callback
}

func (fake *FakeLooper) ScanCurrentStateReturns(result1 error) {
	fake.ScanCurrentStateStub = nil
	fake.scanCurrentStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLooper) ScanCurrentStateReturnsOnCall(i int, result1 error) {
	fake.ScanCurrentStateStub = nil
	if fake.scanCurrentStateReturnsOnCall == nil {
		fake.scanCurrentStateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scanCurrentStateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLooper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanCurrentStateMutex.RLock()
	defer fake.scanCurrentStateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLooper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitclient.Looper = new(FakeLooper)
