// Code generated by counterfeiter. DO NOT EDIT.
package gitclientfakes

import (
	"cred-alert/gitclient"
	"cred-alert/sniff"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeClient struct {
	BranchTargetsStub        func(string) (map[string]string, error)
	branchTargetsMutex       sync.RWMutex
	branchTargetsArgsForCall []struct {
		arg1 string
	}
	branchTargetsReturns struct {
		result1 map[string]string
		result2 error
	}
	branchTargetsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	CloneStub        func(string, string) error
	cloneMutex       sync.RWMutex
	cloneArgsForCall []struct {
		arg1 string
		arg2 string
	}
	cloneReturns struct {
		result1 error
	}
	cloneReturnsOnCall map[int]struct {
		result1 error
	}
	GetParentsStub        func(string, string) ([]string, error)
	getParentsMutex       sync.RWMutex
	getParentsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getParentsReturns struct {
		result1 []string
		result2 error
	}
	getParentsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	FetchStub        func(string) (map[string][]string, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		arg1 string
	}
	fetchReturns struct {
		result1 map[string][]string
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 map[string][]string
		result2 error
	}
	HardResetStub        func(string, string) error
	hardResetMutex       sync.RWMutex
	hardResetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	hardResetReturns struct {
		result1 error
	}
	hardResetReturnsOnCall map[int]struct {
		result1 error
	}
	DiffStub        func(repoPath, parent, child string) (string, error)
	diffMutex       sync.RWMutex
	diffArgsForCall []struct {
		repoPath string
		parent   string
		child    string
	}
	diffReturns struct {
		result1 string
		result2 error
	}
	diffReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	BranchCredentialCountsStub        func(lager.Logger, string, sniff.Sniffer) (map[string]uint, error)
	branchCredentialCountsMutex       sync.RWMutex
	branchCredentialCountsArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 sniff.Sniffer
	}
	branchCredentialCountsReturns struct {
		result1 map[string]uint
		result2 error
	}
	branchCredentialCountsReturnsOnCall map[int]struct {
		result1 map[string]uint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) BranchTargets(arg1 string) (map[string]string, error) {
	fake.branchTargetsMutex.Lock()
	ret, specificReturn := fake.branchTargetsReturnsOnCall[len(fake.branchTargetsArgsForCall)]
	fake.branchTargetsArgsForCall = append(fake.branchTargetsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BranchTargets", []interface{}{arg1})
	fake.branchTargetsMutex.Unlock()
	if fake.BranchTargetsStub != nil {
		return fake.BranchTargetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.branchTargetsReturns.result1, fake.branchTargetsReturns.result2
}

func (fake *FakeClient) BranchTargetsCallCount() int {
	fake.branchTargetsMutex.RLock()
	defer fake.branchTargetsMutex.RUnlock()
	return len(fake.branchTargetsArgsForCall)
}

func (fake *FakeClient) BranchTargetsArgsForCall(i int) string {
	fake.branchTargetsMutex.RLock()
	defer fake.branchTargetsMutex.RUnlock()
	return fake.branchTargetsArgsForCall[i].arg1
}

func (fake *FakeClient) BranchTargetsReturns(result1 map[string]string, result2 error) {
	fake.BranchTargetsStub = nil
	fake.branchTargetsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BranchTargetsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.BranchTargetsStub = nil
	if fake.branchTargetsReturnsOnCall == nil {
		fake.branchTargetsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.branchTargetsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Clone(arg1 string, arg2 string) error {
	fake.cloneMutex.Lock()
	ret, specificReturn := fake.cloneReturnsOnCall[len(fake.cloneArgsForCall)]
	fake.cloneArgsForCall = append(fake.cloneArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Clone", []interface{}{arg1, arg2})
	fake.cloneMutex.Unlock()
	if fake.CloneStub != nil {
		return fake.CloneStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloneReturns.result1
}

func (fake *FakeClient) CloneCallCount() int {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return len(fake.cloneArgsForCall)
}

func (fake *FakeClient) CloneArgsForCall(i int) (string, string) {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return fake.cloneArgsForCall[i].arg1, fake.cloneArgsForCall[i].arg2
}

func (fake *FakeClient) CloneReturns(result1 error) {
	fake.CloneStub = nil
	fake.cloneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CloneReturnsOnCall(i int, result1 error) {
	fake.CloneStub = nil
	if fake.cloneReturnsOnCall == nil {
		fake.cloneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cloneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetParents(arg1 string, arg2 string) ([]string, error) {
	fake.getParentsMutex.Lock()
	ret, specificReturn := fake.getParentsReturnsOnCall[len(fake.getParentsArgsForCall)]
	fake.getParentsArgsForCall = append(fake.getParentsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetParents", []interface{}{arg1, arg2})
	fake.getParentsMutex.Unlock()
	if fake.GetParentsStub != nil {
		return fake.GetParentsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getParentsReturns.result1, fake.getParentsReturns.result2
}

func (fake *FakeClient) GetParentsCallCount() int {
	fake.getParentsMutex.RLock()
	defer fake.getParentsMutex.RUnlock()
	return len(fake.getParentsArgsForCall)
}

func (fake *FakeClient) GetParentsArgsForCall(i int) (string, string) {
	fake.getParentsMutex.RLock()
	defer fake.getParentsMutex.RUnlock()
	return fake.getParentsArgsForCall[i].arg1, fake.getParentsArgsForCall[i].arg2
}

func (fake *FakeClient) GetParentsReturns(result1 []string, result2 error) {
	fake.GetParentsStub = nil
	fake.getParentsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetParentsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.GetParentsStub = nil
	if fake.getParentsReturnsOnCall == nil {
		fake.getParentsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getParentsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Fetch(arg1 string) (map[string][]string, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Fetch", []interface{}{arg1})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2
}

func (fake *FakeClient) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeClient) FetchArgsForCall(i int) string {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].arg1
}

func (fake *FakeClient) FetchReturns(result1 map[string][]string, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 map[string][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchReturnsOnCall(i int, result1 map[string][]string, result2 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 map[string][]string
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 map[string][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) HardReset(arg1 string, arg2 string) error {
	fake.hardResetMutex.Lock()
	ret, specificReturn := fake.hardResetReturnsOnCall[len(fake.hardResetArgsForCall)]
	fake.hardResetArgsForCall = append(fake.hardResetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("HardReset", []interface{}{arg1, arg2})
	fake.hardResetMutex.Unlock()
	if fake.HardResetStub != nil {
		return fake.HardResetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hardResetReturns.result1
}

func (fake *FakeClient) HardResetCallCount() int {
	fake.hardResetMutex.RLock()
	defer fake.hardResetMutex.RUnlock()
	return len(fake.hardResetArgsForCall)
}

func (fake *FakeClient) HardResetArgsForCall(i int) (string, string) {
	fake.hardResetMutex.RLock()
	defer fake.hardResetMutex.RUnlock()
	return fake.hardResetArgsForCall[i].arg1, fake.hardResetArgsForCall[i].arg2
}

func (fake *FakeClient) HardResetReturns(result1 error) {
	fake.HardResetStub = nil
	fake.hardResetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) HardResetReturnsOnCall(i int, result1 error) {
	fake.HardResetStub = nil
	if fake.hardResetReturnsOnCall == nil {
		fake.hardResetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.hardResetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Diff(repoPath string, parent string, child string) (string, error) {
	fake.diffMutex.Lock()
	ret, specificReturn := fake.diffReturnsOnCall[len(fake.diffArgsForCall)]
	fake.diffArgsForCall = append(fake.diffArgsForCall, struct {
		repoPath string
		parent   string
		child    string
	}{repoPath, parent, child})
	fake.recordInvocation("Diff", []interface{}{repoPath, parent, child})
	fake.diffMutex.Unlock()
	if fake.DiffStub != nil {
		return fake.DiffStub(repoPath, parent, child)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.diffReturns.result1, fake.diffReturns.result2
}

func (fake *FakeClient) DiffCallCount() int {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return len(fake.diffArgsForCall)
}

func (fake *FakeClient) DiffArgsForCall(i int) (string, string, string) {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return fake.diffArgsForCall[i].repoPath, fake.diffArgsForCall[i].parent, fake.diffArgsForCall[i].child
}

func (fake *FakeClient) DiffReturns(result1 string, result2 error) {
	fake.DiffStub = nil
	fake.diffReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DiffReturnsOnCall(i int, result1 string, result2 error) {
	fake.DiffStub = nil
	if fake.diffReturnsOnCall == nil {
		fake.diffReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.diffReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BranchCredentialCounts(arg1 lager.Logger, arg2 string, arg3 sniff.Sniffer) (map[string]uint, error) {
	fake.branchCredentialCountsMutex.Lock()
	ret, specificReturn := fake.branchCredentialCountsReturnsOnCall[len(fake.branchCredentialCountsArgsForCall)]
	fake.branchCredentialCountsArgsForCall = append(fake.branchCredentialCountsArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 sniff.Sniffer
	}{arg1, arg2, arg3})
	fake.recordInvocation("BranchCredentialCounts", []interface{}{arg1, arg2, arg3})
	fake.branchCredentialCountsMutex.Unlock()
	if fake.BranchCredentialCountsStub != nil {
		return fake.BranchCredentialCountsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.branchCredentialCountsReturns.result1, fake.branchCredentialCountsReturns.result2
}

func (fake *FakeClient) BranchCredentialCountsCallCount() int {
	fake.branchCredentialCountsMutex.RLock()
	defer fake.branchCredentialCountsMutex.RUnlock()
	return len(fake.branchCredentialCountsArgsForCall)
}

func (fake *FakeClient) BranchCredentialCountsArgsForCall(i int) (lager.Logger, string, sniff.Sniffer) {
	fake.branchCredentialCountsMutex.RLock()
	defer fake.branchCredentialCountsMutex.RUnlock()
	return fake.branchCredentialCountsArgsForCall[i].arg1, fake.branchCredentialCountsArgsForCall[i].arg2, fake.branchCredentialCountsArgsForCall[i].arg3
}

func (fake *FakeClient) BranchCredentialCountsReturns(result1 map[string]uint, result2 error) {
	fake.BranchCredentialCountsStub = nil
	fake.branchCredentialCountsReturns = struct {
		result1 map[string]uint
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BranchCredentialCountsReturnsOnCall(i int, result1 map[string]uint, result2 error) {
	fake.BranchCredentialCountsStub = nil
	if fake.branchCredentialCountsReturnsOnCall == nil {
		fake.branchCredentialCountsReturnsOnCall = make(map[int]struct {
			result1 map[string]uint
			result2 error
		})
	}
	fake.branchCredentialCountsReturnsOnCall[i] = struct {
		result1 map[string]uint
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.branchTargetsMutex.RLock()
	defer fake.branchTargetsMutex.RUnlock()
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	fake.getParentsMutex.RLock()
	defer fake.getParentsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.hardResetMutex.RLock()
	defer fake.hardResetMutex.RUnlock()
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	fake.branchCredentialCountsMutex.RLock()
	defer fake.branchCredentialCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitclient.Client = new(FakeClient)
