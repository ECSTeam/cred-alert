// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"cred-alert/ccp/api"
	"cred-alert/revokpb"
	"sync"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type FakeIndexRevokClient struct {
	GetCredentialCountsStub        func(ctx context.Context, in *revokpb.CredentialCountRequest, opts ...grpc.CallOption) (*revokpb.CredentialCountResponse, error)
	getCredentialCountsMutex       sync.RWMutex
	getCredentialCountsArgsForCall []struct {
		ctx  context.Context
		in   *revokpb.CredentialCountRequest
		opts []grpc.CallOption
	}
	getCredentialCountsReturns struct {
		result1 *revokpb.CredentialCountResponse
		result2 error
	}
	getCredentialCountsReturnsOnCall map[int]struct {
		result1 *revokpb.CredentialCountResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIndexRevokClient) GetCredentialCounts(ctx context.Context, in *revokpb.CredentialCountRequest, opts ...grpc.CallOption) (*revokpb.CredentialCountResponse, error) {
	fake.getCredentialCountsMutex.Lock()
	ret, specificReturn := fake.getCredentialCountsReturnsOnCall[len(fake.getCredentialCountsArgsForCall)]
	fake.getCredentialCountsArgsForCall = append(fake.getCredentialCountsArgsForCall, struct {
		ctx  context.Context
		in   *revokpb.CredentialCountRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("GetCredentialCounts", []interface{}{ctx, in, opts})
	fake.getCredentialCountsMutex.Unlock()
	if fake.GetCredentialCountsStub != nil {
		return fake.GetCredentialCountsStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCredentialCountsReturns.result1, fake.getCredentialCountsReturns.result2
}

func (fake *FakeIndexRevokClient) GetCredentialCountsCallCount() int {
	fake.getCredentialCountsMutex.RLock()
	defer fake.getCredentialCountsMutex.RUnlock()
	return len(fake.getCredentialCountsArgsForCall)
}

func (fake *FakeIndexRevokClient) GetCredentialCountsArgsForCall(i int) (context.Context, *revokpb.CredentialCountRequest, []grpc.CallOption) {
	fake.getCredentialCountsMutex.RLock()
	defer fake.getCredentialCountsMutex.RUnlock()
	return fake.getCredentialCountsArgsForCall[i].ctx, fake.getCredentialCountsArgsForCall[i].in, fake.getCredentialCountsArgsForCall[i].opts
}

func (fake *FakeIndexRevokClient) GetCredentialCountsReturns(result1 *revokpb.CredentialCountResponse, result2 error) {
	fake.GetCredentialCountsStub = nil
	fake.getCredentialCountsReturns = struct {
		result1 *revokpb.CredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexRevokClient) GetCredentialCountsReturnsOnCall(i int, result1 *revokpb.CredentialCountResponse, result2 error) {
	fake.GetCredentialCountsStub = nil
	if fake.getCredentialCountsReturnsOnCall == nil {
		fake.getCredentialCountsReturnsOnCall = make(map[int]struct {
			result1 *revokpb.CredentialCountResponse
			result2 error
		})
	}
	fake.getCredentialCountsReturnsOnCall[i] = struct {
		result1 *revokpb.CredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexRevokClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCredentialCountsMutex.RLock()
	defer fake.getCredentialCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIndexRevokClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.IndexRevokClient = new(FakeIndexRevokClient)
