// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"cred-alert/ccp/api"
	"cred-alert/revokpb"
	"sync"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type FakeOrganizationRevokClient struct {
	GetOrganizationCredentialCountsStub        func(ctx context.Context, in *revokpb.OrganizationCredentialCountRequest, opts ...grpc.CallOption) (*revokpb.OrganizationCredentialCountResponse, error)
	getOrganizationCredentialCountsMutex       sync.RWMutex
	getOrganizationCredentialCountsArgsForCall []struct {
		ctx  context.Context
		in   *revokpb.OrganizationCredentialCountRequest
		opts []grpc.CallOption
	}
	getOrganizationCredentialCountsReturns struct {
		result1 *revokpb.OrganizationCredentialCountResponse
		result2 error
	}
	getOrganizationCredentialCountsReturnsOnCall map[int]struct {
		result1 *revokpb.OrganizationCredentialCountResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrganizationRevokClient) GetOrganizationCredentialCounts(ctx context.Context, in *revokpb.OrganizationCredentialCountRequest, opts ...grpc.CallOption) (*revokpb.OrganizationCredentialCountResponse, error) {
	fake.getOrganizationCredentialCountsMutex.Lock()
	ret, specificReturn := fake.getOrganizationCredentialCountsReturnsOnCall[len(fake.getOrganizationCredentialCountsArgsForCall)]
	fake.getOrganizationCredentialCountsArgsForCall = append(fake.getOrganizationCredentialCountsArgsForCall, struct {
		ctx  context.Context
		in   *revokpb.OrganizationCredentialCountRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("GetOrganizationCredentialCounts", []interface{}{ctx, in, opts})
	fake.getOrganizationCredentialCountsMutex.Unlock()
	if fake.GetOrganizationCredentialCountsStub != nil {
		return fake.GetOrganizationCredentialCountsStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrganizationCredentialCountsReturns.result1, fake.getOrganizationCredentialCountsReturns.result2
}

func (fake *FakeOrganizationRevokClient) GetOrganizationCredentialCountsCallCount() int {
	fake.getOrganizationCredentialCountsMutex.RLock()
	defer fake.getOrganizationCredentialCountsMutex.RUnlock()
	return len(fake.getOrganizationCredentialCountsArgsForCall)
}

func (fake *FakeOrganizationRevokClient) GetOrganizationCredentialCountsArgsForCall(i int) (context.Context, *revokpb.OrganizationCredentialCountRequest, []grpc.CallOption) {
	fake.getOrganizationCredentialCountsMutex.RLock()
	defer fake.getOrganizationCredentialCountsMutex.RUnlock()
	return fake.getOrganizationCredentialCountsArgsForCall[i].ctx, fake.getOrganizationCredentialCountsArgsForCall[i].in, fake.getOrganizationCredentialCountsArgsForCall[i].opts
}

func (fake *FakeOrganizationRevokClient) GetOrganizationCredentialCountsReturns(result1 *revokpb.OrganizationCredentialCountResponse, result2 error) {
	fake.GetOrganizationCredentialCountsStub = nil
	fake.getOrganizationCredentialCountsReturns = struct {
		result1 *revokpb.OrganizationCredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeOrganizationRevokClient) GetOrganizationCredentialCountsReturnsOnCall(i int, result1 *revokpb.OrganizationCredentialCountResponse, result2 error) {
	fake.GetOrganizationCredentialCountsStub = nil
	if fake.getOrganizationCredentialCountsReturnsOnCall == nil {
		fake.getOrganizationCredentialCountsReturnsOnCall = make(map[int]struct {
			result1 *revokpb.OrganizationCredentialCountResponse
			result2 error
		})
	}
	fake.getOrganizationCredentialCountsReturnsOnCall[i] = struct {
		result1 *revokpb.OrganizationCredentialCountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeOrganizationRevokClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOrganizationCredentialCountsMutex.RLock()
	defer fake.getOrganizationCredentialCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOrganizationRevokClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.OrganizationRevokClient = new(FakeOrganizationRevokClient)
