// This file was generated by counterfeiter
package webhookfakes

import (
	"cred-alert/webhook"
	"sync"

	"github.com/google/go-github/github"
	"github.com/pivotal-golang/lager"
)

type FakeScanner struct {
	ScanPushEventStub        func(lager.Logger, github.PushEvent)
	scanPushEventMutex       sync.RWMutex
	scanPushEventArgsForCall []struct {
		arg1 lager.Logger
		arg2 github.PushEvent
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScanner) ScanPushEvent(arg1 lager.Logger, arg2 github.PushEvent) {
	fake.scanPushEventMutex.Lock()
	fake.scanPushEventArgsForCall = append(fake.scanPushEventArgsForCall, struct {
		arg1 lager.Logger
		arg2 github.PushEvent
	}{arg1, arg2})
	fake.recordInvocation("ScanPushEvent", []interface{}{arg1, arg2})
	fake.scanPushEventMutex.Unlock()
	if fake.ScanPushEventStub != nil {
		fake.ScanPushEventStub(arg1, arg2)
	}
}

func (fake *FakeScanner) ScanPushEventCallCount() int {
	fake.scanPushEventMutex.RLock()
	defer fake.scanPushEventMutex.RUnlock()
	return len(fake.scanPushEventArgsForCall)
}

func (fake *FakeScanner) ScanPushEventArgsForCall(i int) (lager.Logger, github.PushEvent) {
	fake.scanPushEventMutex.RLock()
	defer fake.scanPushEventMutex.RUnlock()
	return fake.scanPushEventArgsForCall[i].arg1, fake.scanPushEventArgsForCall[i].arg2
}

func (fake *FakeScanner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanPushEventMutex.RLock()
	defer fake.scanPushEventMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeScanner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhook.Scanner = new(FakeScanner)
