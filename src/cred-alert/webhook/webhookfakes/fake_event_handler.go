// This file was generated by counterfeiter
package webhookfakes

import (
	"cred-alert/webhook"
	"sync"

	"github.com/pivotal-golang/lager"
)

type FakeEventHandler struct {
	HandleEventStub        func(lager.Logger, webhook.PushScan)
	handleEventMutex       sync.RWMutex
	handleEventArgsForCall []struct {
		arg1 lager.Logger
		arg2 webhook.PushScan
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventHandler) HandleEvent(arg1 lager.Logger, arg2 webhook.PushScan) {
	fake.handleEventMutex.Lock()
	fake.handleEventArgsForCall = append(fake.handleEventArgsForCall, struct {
		arg1 lager.Logger
		arg2 webhook.PushScan
	}{arg1, arg2})
	fake.recordInvocation("HandleEvent", []interface{}{arg1, arg2})
	fake.handleEventMutex.Unlock()
	if fake.HandleEventStub != nil {
		fake.HandleEventStub(arg1, arg2)
	}
}

func (fake *FakeEventHandler) HandleEventCallCount() int {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return len(fake.handleEventArgsForCall)
}

func (fake *FakeEventHandler) HandleEventArgsForCall(i int) (lager.Logger, webhook.PushScan) {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return fake.handleEventArgsForCall[i].arg1, fake.handleEventArgsForCall[i].arg2
}

func (fake *FakeEventHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEventHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhook.EventHandler = new(FakeEventHandler)
