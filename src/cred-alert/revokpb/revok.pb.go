// Code generated by protoc-gen-go. DO NOT EDIT.
// source: revok.proto

/*
Package revokpb is a generated protocol buffer package.

It is generated from these files:
	revok.proto

It has these top-level messages:
	CredentialCountRequest
	OrganizationCredentialCount
	CredentialCountResponse
	OrganizationCredentialCountRequest
	RepositoryCredentialCount
	OrganizationCredentialCountResponse
	RepositoryCredentialCountRequest
	BranchCredentialCount
	RepositoryCredentialCountResponse
	SearchQuery
	SearchResult
	SourceLocation
	BoshBlobsRequest
	BoshBlob
	BoshBlobsResponse
*/
package revokpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import redpb "red/redpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CredentialCountRequest struct {
}

func (m *CredentialCountRequest) Reset()                    { *m = CredentialCountRequest{} }
func (m *CredentialCountRequest) String() string            { return proto.CompactTextString(m) }
func (*CredentialCountRequest) ProtoMessage()               {}
func (*CredentialCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OrganizationCredentialCount struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *OrganizationCredentialCount) Reset()                    { *m = OrganizationCredentialCount{} }
func (m *OrganizationCredentialCount) String() string            { return proto.CompactTextString(m) }
func (*OrganizationCredentialCount) ProtoMessage()               {}
func (*OrganizationCredentialCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrganizationCredentialCount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OrganizationCredentialCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CredentialCountResponse struct {
	CredentialCounts []*OrganizationCredentialCount `protobuf:"bytes,1,rep,name=credentialCounts" json:"credentialCounts,omitempty"`
}

func (m *CredentialCountResponse) Reset()                    { *m = CredentialCountResponse{} }
func (m *CredentialCountResponse) String() string            { return proto.CompactTextString(m) }
func (*CredentialCountResponse) ProtoMessage()               {}
func (*CredentialCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CredentialCountResponse) GetCredentialCounts() []*OrganizationCredentialCount {
	if m != nil {
		return m.CredentialCounts
	}
	return nil
}

type OrganizationCredentialCountRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
}

func (m *OrganizationCredentialCountRequest) Reset()         { *m = OrganizationCredentialCountRequest{} }
func (m *OrganizationCredentialCountRequest) String() string { return proto.CompactTextString(m) }
func (*OrganizationCredentialCountRequest) ProtoMessage()    {}
func (*OrganizationCredentialCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *OrganizationCredentialCountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type RepositoryCredentialCount struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *RepositoryCredentialCount) Reset()                    { *m = RepositoryCredentialCount{} }
func (m *RepositoryCredentialCount) String() string            { return proto.CompactTextString(m) }
func (*RepositoryCredentialCount) ProtoMessage()               {}
func (*RepositoryCredentialCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RepositoryCredentialCount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RepositoryCredentialCount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryCredentialCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OrganizationCredentialCountResponse struct {
	CredentialCounts []*RepositoryCredentialCount `protobuf:"bytes,1,rep,name=credentialCounts" json:"credentialCounts,omitempty"`
}

func (m *OrganizationCredentialCountResponse) Reset()         { *m = OrganizationCredentialCountResponse{} }
func (m *OrganizationCredentialCountResponse) String() string { return proto.CompactTextString(m) }
func (*OrganizationCredentialCountResponse) ProtoMessage()    {}
func (*OrganizationCredentialCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func (m *OrganizationCredentialCountResponse) GetCredentialCounts() []*RepositoryCredentialCount {
	if m != nil {
		return m.CredentialCounts
	}
	return nil
}

type RepositoryCredentialCountRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *RepositoryCredentialCountRequest) Reset()         { *m = RepositoryCredentialCountRequest{} }
func (m *RepositoryCredentialCountRequest) String() string { return proto.CompactTextString(m) }
func (*RepositoryCredentialCountRequest) ProtoMessage()    {}
func (*RepositoryCredentialCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6}
}

func (m *RepositoryCredentialCountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RepositoryCredentialCountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BranchCredentialCount struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *BranchCredentialCount) Reset()                    { *m = BranchCredentialCount{} }
func (m *BranchCredentialCount) String() string            { return proto.CompactTextString(m) }
func (*BranchCredentialCount) ProtoMessage()               {}
func (*BranchCredentialCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BranchCredentialCount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BranchCredentialCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RepositoryCredentialCountResponse struct {
	CredentialCounts []*BranchCredentialCount `protobuf:"bytes,1,rep,name=credentialCounts" json:"credentialCounts,omitempty"`
}

func (m *RepositoryCredentialCountResponse) Reset()         { *m = RepositoryCredentialCountResponse{} }
func (m *RepositoryCredentialCountResponse) String() string { return proto.CompactTextString(m) }
func (*RepositoryCredentialCountResponse) ProtoMessage()    {}
func (*RepositoryCredentialCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8}
}

func (m *RepositoryCredentialCountResponse) GetCredentialCounts() []*BranchCredentialCount {
	if m != nil {
		return m.CredentialCounts
	}
	return nil
}

type SearchQuery struct {
	Regex string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
}

func (m *SearchQuery) Reset()                    { *m = SearchQuery{} }
func (m *SearchQuery) String() string            { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()               {}
func (*SearchQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchQuery) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

type SearchResult struct {
	Location *SourceLocation `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Content  []byte          `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResult) GetLocation() *SourceLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *SearchResult) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type SourceLocation struct {
	Repository *redpb.Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Revision   string            `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Path       string            `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	LineNumber uint32            `protobuf:"varint,4,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	Location   uint32            `protobuf:"varint,5,opt,name=location" json:"location,omitempty"`
	Length     uint32            `protobuf:"varint,6,opt,name=length" json:"length,omitempty"`
}

func (m *SourceLocation) Reset()                    { *m = SourceLocation{} }
func (m *SourceLocation) String() string            { return proto.CompactTextString(m) }
func (*SourceLocation) ProtoMessage()               {}
func (*SourceLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SourceLocation) GetRepository() *redpb.Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *SourceLocation) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *SourceLocation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SourceLocation) GetLineNumber() uint32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *SourceLocation) GetLocation() uint32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *SourceLocation) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type BoshBlobsRequest struct {
	Repository *redpb.Repository `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *BoshBlobsRequest) Reset()                    { *m = BoshBlobsRequest{} }
func (m *BoshBlobsRequest) String() string            { return proto.CompactTextString(m) }
func (*BoshBlobsRequest) ProtoMessage()               {}
func (*BoshBlobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BoshBlobsRequest) GetRepository() *redpb.Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type BoshBlob struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Sha  string `protobuf:"bytes,2,opt,name=sha" json:"sha,omitempty"`
}

func (m *BoshBlob) Reset()                    { *m = BoshBlob{} }
func (m *BoshBlob) String() string            { return proto.CompactTextString(m) }
func (*BoshBlob) ProtoMessage()               {}
func (*BoshBlob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BoshBlob) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *BoshBlob) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

type BoshBlobsResponse struct {
	Blobs []*BoshBlob `protobuf:"bytes,1,rep,name=blobs" json:"blobs,omitempty"`
}

func (m *BoshBlobsResponse) Reset()                    { *m = BoshBlobsResponse{} }
func (m *BoshBlobsResponse) String() string            { return proto.CompactTextString(m) }
func (*BoshBlobsResponse) ProtoMessage()               {}
func (*BoshBlobsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BoshBlobsResponse) GetBlobs() []*BoshBlob {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func init() {
	proto.RegisterType((*CredentialCountRequest)(nil), "revokpb.CredentialCountRequest")
	proto.RegisterType((*OrganizationCredentialCount)(nil), "revokpb.OrganizationCredentialCount")
	proto.RegisterType((*CredentialCountResponse)(nil), "revokpb.CredentialCountResponse")
	proto.RegisterType((*OrganizationCredentialCountRequest)(nil), "revokpb.OrganizationCredentialCountRequest")
	proto.RegisterType((*RepositoryCredentialCount)(nil), "revokpb.RepositoryCredentialCount")
	proto.RegisterType((*OrganizationCredentialCountResponse)(nil), "revokpb.OrganizationCredentialCountResponse")
	proto.RegisterType((*RepositoryCredentialCountRequest)(nil), "revokpb.RepositoryCredentialCountRequest")
	proto.RegisterType((*BranchCredentialCount)(nil), "revokpb.BranchCredentialCount")
	proto.RegisterType((*RepositoryCredentialCountResponse)(nil), "revokpb.RepositoryCredentialCountResponse")
	proto.RegisterType((*SearchQuery)(nil), "revokpb.SearchQuery")
	proto.RegisterType((*SearchResult)(nil), "revokpb.SearchResult")
	proto.RegisterType((*SourceLocation)(nil), "revokpb.SourceLocation")
	proto.RegisterType((*BoshBlobsRequest)(nil), "revokpb.BoshBlobsRequest")
	proto.RegisterType((*BoshBlob)(nil), "revokpb.BoshBlob")
	proto.RegisterType((*BoshBlobsResponse)(nil), "revokpb.BoshBlobsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Revok service

type RevokClient interface {
	GetCredentialCounts(ctx context.Context, in *CredentialCountRequest, opts ...grpc.CallOption) (*CredentialCountResponse, error)
	GetOrganizationCredentialCounts(ctx context.Context, in *OrganizationCredentialCountRequest, opts ...grpc.CallOption) (*OrganizationCredentialCountResponse, error)
	GetRepositoryCredentialCounts(ctx context.Context, in *RepositoryCredentialCountRequest, opts ...grpc.CallOption) (*RepositoryCredentialCountResponse, error)
	Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (Revok_SearchClient, error)
	BoshBlobs(ctx context.Context, in *BoshBlobsRequest, opts ...grpc.CallOption) (*BoshBlobsResponse, error)
}

type revokClient struct {
	cc *grpc.ClientConn
}

func NewRevokClient(cc *grpc.ClientConn) RevokClient {
	return &revokClient{cc}
}

func (c *revokClient) GetCredentialCounts(ctx context.Context, in *CredentialCountRequest, opts ...grpc.CallOption) (*CredentialCountResponse, error) {
	out := new(CredentialCountResponse)
	err := grpc.Invoke(ctx, "/revokpb.Revok/GetCredentialCounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revokClient) GetOrganizationCredentialCounts(ctx context.Context, in *OrganizationCredentialCountRequest, opts ...grpc.CallOption) (*OrganizationCredentialCountResponse, error) {
	out := new(OrganizationCredentialCountResponse)
	err := grpc.Invoke(ctx, "/revokpb.Revok/GetOrganizationCredentialCounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revokClient) GetRepositoryCredentialCounts(ctx context.Context, in *RepositoryCredentialCountRequest, opts ...grpc.CallOption) (*RepositoryCredentialCountResponse, error) {
	out := new(RepositoryCredentialCountResponse)
	err := grpc.Invoke(ctx, "/revokpb.Revok/GetRepositoryCredentialCounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revokClient) Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (Revok_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Revok_serviceDesc.Streams[0], c.cc, "/revokpb.Revok/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &revokSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Revok_SearchClient interface {
	Recv() (*SearchResult, error)
	grpc.ClientStream
}

type revokSearchClient struct {
	grpc.ClientStream
}

func (x *revokSearchClient) Recv() (*SearchResult, error) {
	m := new(SearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *revokClient) BoshBlobs(ctx context.Context, in *BoshBlobsRequest, opts ...grpc.CallOption) (*BoshBlobsResponse, error) {
	out := new(BoshBlobsResponse)
	err := grpc.Invoke(ctx, "/revokpb.Revok/BoshBlobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Revok service

type RevokServer interface {
	GetCredentialCounts(context.Context, *CredentialCountRequest) (*CredentialCountResponse, error)
	GetOrganizationCredentialCounts(context.Context, *OrganizationCredentialCountRequest) (*OrganizationCredentialCountResponse, error)
	GetRepositoryCredentialCounts(context.Context, *RepositoryCredentialCountRequest) (*RepositoryCredentialCountResponse, error)
	Search(*SearchQuery, Revok_SearchServer) error
	BoshBlobs(context.Context, *BoshBlobsRequest) (*BoshBlobsResponse, error)
}

func RegisterRevokServer(s *grpc.Server, srv RevokServer) {
	s.RegisterService(&_Revok_serviceDesc, srv)
}

func _Revok_GetCredentialCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevokServer).GetCredentialCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revokpb.Revok/GetCredentialCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevokServer).GetCredentialCounts(ctx, req.(*CredentialCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revok_GetOrganizationCredentialCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationCredentialCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevokServer).GetOrganizationCredentialCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revokpb.Revok/GetOrganizationCredentialCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevokServer).GetOrganizationCredentialCounts(ctx, req.(*OrganizationCredentialCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revok_GetRepositoryCredentialCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryCredentialCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevokServer).GetRepositoryCredentialCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revokpb.Revok/GetRepositoryCredentialCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevokServer).GetRepositoryCredentialCounts(ctx, req.(*RepositoryCredentialCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Revok_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RevokServer).Search(m, &revokSearchServer{stream})
}

type Revok_SearchServer interface {
	Send(*SearchResult) error
	grpc.ServerStream
}

type revokSearchServer struct {
	grpc.ServerStream
}

func (x *revokSearchServer) Send(m *SearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Revok_BoshBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoshBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevokServer).BoshBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revokpb.Revok/BoshBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevokServer).BoshBlobs(ctx, req.(*BoshBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Revok_serviceDesc = grpc.ServiceDesc{
	ServiceName: "revokpb.Revok",
	HandlerType: (*RevokServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredentialCounts",
			Handler:    _Revok_GetCredentialCounts_Handler,
		},
		{
			MethodName: "GetOrganizationCredentialCounts",
			Handler:    _Revok_GetOrganizationCredentialCounts_Handler,
		},
		{
			MethodName: "GetRepositoryCredentialCounts",
			Handler:    _Revok_GetRepositoryCredentialCounts_Handler,
		},
		{
			MethodName: "BoshBlobs",
			Handler:    _Revok_BoshBlobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Revok_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "revok.proto",
}

func init() { proto.RegisterFile("revok.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6d, 0x4f, 0xd4, 0x40,
	0x10, 0xa6, 0x1e, 0x77, 0x70, 0x73, 0x68, 0x60, 0xe5, 0xa5, 0x9c, 0x51, 0xce, 0xc5, 0xc4, 0xf3,
	0x25, 0x17, 0x84, 0x4f, 0x1a, 0xbf, 0x08, 0x1a, 0xa2, 0x21, 0xa8, 0xcb, 0x37, 0x8d, 0x31, 0xbd,
	0x32, 0xa1, 0x0d, 0x65, 0xb7, 0xee, 0x6e, 0x11, 0xfc, 0xe0, 0xef, 0xf3, 0x57, 0xf8, 0x5b, 0x4c,
	0xb7, 0xdb, 0xde, 0x0b, 0x6d, 0x73, 0x7e, 0xdb, 0x99, 0x79, 0xb6, 0xf3, 0xcc, 0x33, 0x33, 0x5b,
	0xe8, 0x48, 0xbc, 0x14, 0xe7, 0x83, 0x58, 0x0a, 0x2d, 0xc8, 0x82, 0x31, 0xe2, 0x61, 0x17, 0x24,
	0xc6, 0x22, 0x73, 0x52, 0x17, 0xd6, 0x0f, 0x24, 0x9e, 0x22, 0xd7, 0xa1, 0x17, 0x1d, 0x88, 0x84,
	0x6b, 0x86, 0x3f, 0x12, 0x54, 0x9a, 0xbe, 0x87, 0x7b, 0x1f, 0xe5, 0x99, 0xc7, 0xc3, 0x5f, 0x9e,
	0x0e, 0x05, 0x9f, 0x42, 0x91, 0x55, 0x68, 0x8a, 0x9f, 0x1c, 0xa5, 0xeb, 0xf4, 0x9c, 0x7e, 0x9b,
	0x65, 0x46, 0xea, 0xf5, 0xd3, 0xb0, 0x7b, 0xab, 0xe7, 0xf4, 0x1b, 0x2c, 0x33, 0xe8, 0x39, 0x6c,
	0xdc, 0x48, 0xa2, 0x62, 0xc1, 0x15, 0x92, 0x4f, 0xb0, 0xec, 0x4f, 0x86, 0x94, 0xeb, 0xf4, 0x1a,
	0xfd, 0xce, 0xee, 0xa3, 0x81, 0xe5, 0x3b, 0xa8, 0xa1, 0xc1, 0x6e, 0xdc, 0xa6, 0xaf, 0x80, 0xd6,
	0x5d, 0xc8, 0xaa, 0x2b, 0xa7, 0x4f, 0xbf, 0xc2, 0x26, 0xc3, 0x58, 0xa8, 0x50, 0x0b, 0x79, 0x3d,
	0x5b, 0xc5, 0x04, 0xe6, 0xb9, 0x77, 0x81, 0xa6, 0xe0, 0x36, 0x33, 0xe7, 0x91, 0x0a, 0x8d, 0x71,
	0x15, 0x12, 0xd8, 0xae, 0x25, 0x66, 0x15, 0x39, 0xae, 0x54, 0x84, 0x16, 0x8a, 0x54, 0x92, 0x2c,
	0xd1, 0xe3, 0x08, 0x7a, 0xd5, 0xf0, 0x3a, 0x35, 0xca, 0x4a, 0xa3, 0x6f, 0x60, 0x6d, 0x5f, 0x7a,
	0xdc, 0x0f, 0xa6, 0xd5, 0xc9, 0xc1, 0x4e, 0x99, 0x0e, 0x13, 0xd3, 0x20, 0xe0, 0x61, 0x0d, 0x21,
	0xab, 0xc2, 0x87, 0x4a, 0x15, 0x1e, 0x14, 0x2a, 0x94, 0x12, 0x29, 0x51, 0x60, 0x1b, 0x3a, 0x27,
	0xe8, 0x49, 0x3f, 0xf8, 0x9c, 0xa0, 0xbc, 0x4e, 0x59, 0x49, 0x3c, 0xc3, 0xab, 0xbc, 0x58, 0x63,
	0xd0, 0x6f, 0xb0, 0x94, 0x81, 0x18, 0xaa, 0x24, 0xd2, 0x64, 0x0f, 0x16, 0x23, 0xe1, 0x9b, 0x4e,
	0x19, 0x60, 0x67, 0x77, 0xa3, 0x48, 0x7c, 0x22, 0x12, 0xe9, 0xe3, 0x91, 0x0d, 0xb3, 0x02, 0x48,
	0x5c, 0x58, 0xf0, 0x05, 0xd7, 0x68, 0x4b, 0x5e, 0x62, 0xb9, 0x49, 0xff, 0x38, 0x70, 0x67, 0xf2,
	0x1a, 0x79, 0x01, 0x66, 0x11, 0x33, 0x1d, 0x6c, 0x8e, 0x95, 0x81, 0xc4, 0xd3, 0x89, 0x06, 0xb3,
	0x31, 0x10, 0xe9, 0xc2, 0xa2, 0xc4, 0xcb, 0x50, 0xa5, 0xa4, 0xb2, 0xae, 0x14, 0x76, 0xda, 0x80,
	0xd8, 0xd3, 0x81, 0x99, 0xb9, 0x36, 0x33, 0x67, 0xb2, 0x05, 0x9d, 0x28, 0xe4, 0xf8, 0x9d, 0x27,
	0x17, 0x43, 0x94, 0xee, 0x7c, 0xcf, 0xe9, 0xdf, 0x66, 0x90, 0xba, 0x8e, 0x8d, 0x27, 0xfd, 0x60,
	0x51, 0x65, 0xd3, 0x44, 0x47, 0xc5, 0xac, 0x43, 0x2b, 0x42, 0x7e, 0xa6, 0x03, 0xb7, 0x65, 0x22,
	0xd6, 0xa2, 0xef, 0x60, 0x79, 0x5f, 0xa8, 0x60, 0x3f, 0x12, 0x43, 0x95, 0x0f, 0xd0, 0xff, 0xd7,
	0x42, 0x77, 0x60, 0x31, 0xff, 0x4c, 0xc1, 0xdd, 0x19, 0xe3, 0xbe, 0x0c, 0x0d, 0x15, 0x78, 0xb6,
	0xcc, 0xf4, 0x48, 0x5f, 0xc3, 0xca, 0x58, 0x62, 0x3b, 0x28, 0x8f, 0xa1, 0x39, 0x4c, 0x1d, 0x76,
	0x3a, 0x56, 0x46, 0xd3, 0x61, 0xa1, 0x2c, 0x8b, 0xef, 0xfe, 0x6d, 0x40, 0x93, 0xa5, 0x31, 0xf2,
	0x05, 0xee, 0x1e, 0xa2, 0x9e, 0x9a, 0x1b, 0x45, 0xb6, 0x8a, 0xab, 0xe5, 0x5b, 0xd2, 0xed, 0x55,
	0x03, 0x32, 0x32, 0x74, 0x8e, 0xfc, 0x86, 0xad, 0x43, 0xd4, 0x35, 0x7b, 0xae, 0xc8, 0xb3, 0x99,
	0x1e, 0x36, 0x9b, 0xf3, 0xf9, 0x6c, 0xe0, 0x22, 0xff, 0x15, 0xdc, 0x3f, 0x44, 0x5d, 0xb9, 0x5f,
	0x8a, 0x3c, 0x99, 0xe1, 0x11, 0xb1, 0xb9, 0x9f, 0xce, 0x02, 0x2d, 0x32, 0xbf, 0x84, 0x56, 0xb6,
	0x40, 0x64, 0x75, 0xb4, 0x28, 0xa3, 0xb5, 0xeb, 0xae, 0x4d, 0x79, 0xb3, 0x3d, 0xa3, 0x73, 0x3b,
	0x0e, 0x79, 0x0b, 0xed, 0xa2, 0xb1, 0x64, 0xf3, 0x46, 0x07, 0xf3, 0x29, 0xeb, 0x76, 0xcb, 0x42,
	0x39, 0x81, 0x61, 0xcb, 0xfc, 0xd1, 0xf6, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x0a, 0xa3,
	0x27, 0xf5, 0x06, 0x00, 0x00,
}
