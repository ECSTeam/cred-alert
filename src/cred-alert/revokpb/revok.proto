syntax = "proto3";

package revokpb;

service Revok {
  rpc GetCredentialCounts(CredentialCountRequest) returns (CredentialCountResponse) {}
  rpc GetOrganizationCredentialCounts(OrganizationCredentialCountRequest) returns (OrganizationCredentialCountResponse) {}
  rpc GetRepositoryCredentialCounts(RepositoryCredentialCountRequest) returns (RepositoryCredentialCountResponse) {}

  rpc Search(SearchQuery) returns (stream SearchResult) {}

  rpc BoshBlobs(BoshBlobsRequest) returns (BoshBlobsResponse) {}
}

import "repo.proto";

message CredentialCountRequest {}

message OrganizationCredentialCount {
  string owner = 1;
  int64 count = 2;
}

message CredentialCountResponse {
  repeated OrganizationCredentialCount credentialCounts = 1;
}

message OrganizationCredentialCountRequest {
  string owner = 1;
}

message RepositoryCredentialCount {
  string owner = 1;
  string name = 2;
  int64 count = 3;
  bool private = 4;
}

message OrganizationCredentialCountResponse {
  repeated RepositoryCredentialCount credentialCounts = 1;
}

message RepositoryCredentialCountRequest {
  string owner = 1;
  string name = 2;
}

message BranchCredentialCount {
  string name = 1;
  int64 count = 2;
}

message RepositoryCredentialCountResponse {
  repeated BranchCredentialCount credentialCounts = 1;
  bool private = 2;
}

message SearchQuery {
  string regex = 1;
}

message SearchResult {
  SourceLocation location = 1;
  bytes content = 2;
}

message SourceLocation {
  redpb.Repository repository = 1;
  string revision = 2;
  string path = 3;

  uint32 line_number = 4;
  uint32 location = 5;
  uint32 length = 6;
}

message BoshBlobsRequest {
  redpb.Repository repository = 1;
}

message BoshBlob {
  string path = 1;
  string sha = 2;
}

message BoshBlobsResponse {
  repeated BoshBlob blobs = 1;
}
