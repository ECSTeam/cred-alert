// This file was generated by counterfeiter
package tracefakes

import (
	"sync"
	"trace"

	cloudtrace "cloud.google.com/go/trace"
)

type FakeClient struct {
	NewSpanStub        func(name string) *cloudtrace.Span
	newSpanMutex       sync.RWMutex
	newSpanArgsForCall []struct {
		name string
	}
	newSpanReturns struct {
		result1 *cloudtrace.Span
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) NewSpan(name string) *cloudtrace.Span {
	fake.newSpanMutex.Lock()
	fake.newSpanArgsForCall = append(fake.newSpanArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("NewSpan", []interface{}{name})
	fake.newSpanMutex.Unlock()
	if fake.NewSpanStub != nil {
		return fake.NewSpanStub(name)
	}
	return fake.newSpanReturns.result1
}

func (fake *FakeClient) NewSpanCallCount() int {
	fake.newSpanMutex.RLock()
	defer fake.newSpanMutex.RUnlock()
	return len(fake.newSpanArgsForCall)
}

func (fake *FakeClient) NewSpanArgsForCall(i int) string {
	fake.newSpanMutex.RLock()
	defer fake.newSpanMutex.RUnlock()
	return fake.newSpanArgsForCall[i].name
}

func (fake *FakeClient) NewSpanReturns(result1 *cloudtrace.Span) {
	fake.NewSpanStub = nil
	fake.newSpanReturns = struct {
		result1 *cloudtrace.Span
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newSpanMutex.RLock()
	defer fake.newSpanMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ trace.Client = new(FakeClient)
