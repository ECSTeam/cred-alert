// Code generated by counterfeiter. DO NOT EDIT.
package matchersfakes

import (
	"sync"

	"github.com/pivotal-cf/cred-alert/sniff/matchers"
)

type FakeMatcher struct {
	MatchStub        func([]byte) (bool, int, int)
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 []byte
	}
	matchReturns struct {
		result1 bool
		result2 int
		result3 int
	}
	matchReturnsOnCall map[int]struct {
		result1 bool
		result2 int
		result3 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMatcher) Match(arg1 []byte) (bool, int, int) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.matchMutex.Lock()
	ret, specificReturn := fake.matchReturnsOnCall[len(fake.matchArgsForCall)]
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Match", []interface{}{arg1Copy})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.matchReturns.result1, fake.matchReturns.result2, fake.matchReturns.result3
}

func (fake *FakeMatcher) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeMatcher) MatchArgsForCall(i int) []byte {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return fake.matchArgsForCall[i].arg1
}

func (fake *FakeMatcher) MatchReturns(result1 bool, result2 int, result3 int) {
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 bool
		result2 int
		result3 int
	}{result1, result2, result3}
}

func (fake *FakeMatcher) MatchReturnsOnCall(i int, result1 bool, result2 int, result3 int) {
	fake.MatchStub = nil
	if fake.matchReturnsOnCall == nil {
		fake.matchReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 int
			result3 int
		})
	}
	fake.matchReturnsOnCall[i] = struct {
		result1 bool
		result2 int
		result3 int
	}{result1, result2, result3}
}

func (fake *FakeMatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ matchers.Matcher = new(FakeMatcher)
